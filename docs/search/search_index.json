{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6b22\u8fce\u6765\u5230\u672c\u7ad9\ud83e\udd80\uff01 \u00b6 \u8fd9\u662f\u4e00\u4e2a\u5206\u4eab Rust \u5b66\u4e60\u8d44\u6599\u7684\u5728\u7ebf\u5b66\u4e60\u7f51\u7ad9 https://getrust.tech \ud83d\udcda\u3002 \u76ee\u7684\u662f\u4ec0\u4e48\u2753 \u00b6 \u901a\u8fc7\u8fde\u8f7d\u6587\u7ae0\u7684\u5f62\u5f0f\u5e2e\u52a9\u6709\u4e00\u5b9a\u5176\u4ed6\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840\u7684\u4eba\u5feb\u901f\u5b66\u4e60\u548c\u5165\u95e8 Rust \u5185\u5bb9\u5305\u62ec Rust \u57fa\u7840\u3001\u5185\u7f6e\u5e93\u3001 web \u5f00\u53d1\u3001\u5e76\u53d1\u7f16\u7a0b\u7b49\uff0c\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5f00\u53d1\u7ecf\u9a8c\u603b\u7ed3\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002 \u672c\u7535\u5b50\u4e66\u4e3b\u8981\u9762\u5411\u6709\u4e00\u5b9a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f00\u53d1\u7ecf\u9a8c\u7684\u5f00\u53d1\u8005\u5feb\u901f\u4e0a\u624b Rust \uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u4e00\u4e9b\u975e\u5e38\u5177\u4f53\u548c\u7ec6\u8282\u7684\u95ee\u9898\uff0c\u975e\u96f6\u57fa\u7840\u6559\u7a0b\uff0c\u7f16\u7a0b\u65b0\u624b\u53ef\u4ee5\u5148\u8865\u4e00\u8865\u5f00\u53d1\u57fa\u7840\u3002 \u9605\u8bfb\u548c\u53c2\u5165 \u00b6 \u9605\u8bfb\u5730\u5740\uff1a https://getrust.tech \u672c\u9879\u76ee\u5730\u5740\uff1a https://github.com/higker/learn-rust \u672c\u9879\u76ee\u6e90\u4ee3\u7801\uff1a https://github.com/higker/learning-rust-zh \u7ef4\u62a4\u8005 \u00b6 Jarvib Ding \u671f\u5f85\u66f4\u591a\u4eba\u52a0\u5165 \u8054\u7cfb\ud83d\udcee: deen.job@qq.com \u9879\u76ee\u6301\u7eed\u66f4\u65b0\u4e2d... \u8ba8\u8bba\u7ec4 \u00b6","title":"\u5173\u4e8e\u672c\u7ad9"},{"location":"#_1","text":"\u8fd9\u662f\u4e00\u4e2a\u5206\u4eab Rust \u5b66\u4e60\u8d44\u6599\u7684\u5728\u7ebf\u5b66\u4e60\u7f51\u7ad9 https://getrust.tech \ud83d\udcda\u3002","title":"\u6b22\u8fce\u6765\u5230\u672c\u7ad9\ud83e\udd80\uff01"},{"location":"#_2","text":"\u901a\u8fc7\u8fde\u8f7d\u6587\u7ae0\u7684\u5f62\u5f0f\u5e2e\u52a9\u6709\u4e00\u5b9a\u5176\u4ed6\u8bed\u8a00\u7f16\u7a0b\u57fa\u7840\u7684\u4eba\u5feb\u901f\u5b66\u4e60\u548c\u5165\u95e8 Rust \u5185\u5bb9\u5305\u62ec Rust \u57fa\u7840\u3001\u5185\u7f6e\u5e93\u3001 web \u5f00\u53d1\u3001\u5e76\u53d1\u7f16\u7a0b\u7b49\uff0c\u5747\u6765\u81ea\u7b14\u8005\u65e5\u5e38\u5b66\u4e60\u548c\u5f00\u53d1\u7ecf\u9a8c\u603b\u7ed3\uff0c\u65b9\u4fbf\u8bfb\u8005\u7406\u89e3\u3002 \u672c\u7535\u5b50\u4e66\u4e3b\u8981\u9762\u5411\u6709\u4e00\u5b9a\u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u5f00\u53d1\u7ecf\u9a8c\u7684\u5f00\u53d1\u8005\u5feb\u901f\u4e0a\u624b Rust \uff0c\u4e0d\u4f1a\u6d89\u53ca\u5230\u4e00\u4e9b\u975e\u5e38\u5177\u4f53\u548c\u7ec6\u8282\u7684\u95ee\u9898\uff0c\u975e\u96f6\u57fa\u7840\u6559\u7a0b\uff0c\u7f16\u7a0b\u65b0\u624b\u53ef\u4ee5\u5148\u8865\u4e00\u8865\u5f00\u53d1\u57fa\u7840\u3002","title":"\u76ee\u7684\u662f\u4ec0\u4e48\u2753"},{"location":"#_3","text":"\u9605\u8bfb\u5730\u5740\uff1a https://getrust.tech \u672c\u9879\u76ee\u5730\u5740\uff1a https://github.com/higker/learn-rust \u672c\u9879\u76ee\u6e90\u4ee3\u7801\uff1a https://github.com/higker/learning-rust-zh","title":"\u9605\u8bfb\u548c\u53c2\u5165"},{"location":"#_4","text":"Jarvib Ding \u671f\u5f85\u66f4\u591a\u4eba\u52a0\u5165 \u8054\u7cfb\ud83d\udcee: deen.job@qq.com \u9879\u76ee\u6301\u7eed\u66f4\u65b0\u4e2d...","title":"\u7ef4\u62a4\u8005"},{"location":"#_5","text":"","title":"\u8ba8\u8bba\u7ec4"},{"location":"docs/condition/","text":"\u6982 \u5ff5 \u00b6 \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c \u6761\u4ef6\u8868\u8fbe\u5f0f \u53c8\u79f0\u6761\u4ef6\u8fd0\u7b97\u5f0f\u3001 \u6761\u4ef6\u8868\u793a\u5f0f \uff0c\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u51b3\u5b9a\u5f53\u7a0b\u5e8f\u6307\u5b9a\u7684\u5e03\u5c14\u8fd0\u7b97\u503c\u4e3a\u771f\u6216\u5047\u65f6\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u5c06\u4f1a\u91c7\u53d6\u7684\u884c\u52a8\u3002 \u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u80fd\u505a\u5f88\u591a\u81ea\u52a8\u5316\u7684\u4efb\u52a1\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u81ea\u5df1\u505a\u6761\u4ef6\u5224\u65ad\u3002 \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4f1a\u6839\u636e\u6761\u4ef6\u4e0d\u540c\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u3002 if \u8bed\u53e5\u8bed\u6cd5 \u00b6 Rust \u8bed\u8a00\u4e2d\u4f7f\u7528 if \u8bed\u53e5\u6765\u6a21\u62df\u73b0\u5b9e\u751f\u6d3b\u4e2d\u8fd9\u79cd \u5982\u679c...\u5c31 \u7684\u60c5\u51b5. 1 2 3 4 5 6 7 8 fn main () { let age = 22 ; if age > 18 { println! ( \"\u4f60\u5df2\u7ecf\u6210\u5e74\u4e86\uff01\" ) } } // OUT // \u4f60\u5df2\u7ecf\u6210\u5e74\u4e86\uff01 if else \u8bed\u53e5 \u00b6 \u5728 if else \u8bed\u53e5\u4e2d\uff0c if \u8bed\u53e5\u624d\u662f\u6700\u4e3b\u8981\u7684\u3002\u5982\u679c \u6761\u4ef6 \u4e3a\u771f\uff0c\u5c31\u6ca1 else \u8bed\u53e5\u5565\u4e8b\u4e86\u3002 \u5176\u5b9e if \u8bed\u53e5\u540e\u9762\u7684 else \u8bed\u53e5\u662f\u53ef\u9009\u7684\u3002\u5c31\u50cf\u6211\u4eec\u6240\u8bf4\u7684\uff0c\u5982\u679c \u6761\u4ef6 \u4e3a\u5047\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u90a3\u8981 else \u8bed\u53e5\u6709\u4ec0\u4e48\u7528\u5462\uff1f else \u8bed\u53e5\u7684\u552f\u4e00\u4f5c\u7528\uff0c\u5c31\u662f if \u8bed\u53e5\u4e2d\u7684 \u6761\u4ef6 \u4e3a\u5047\u65f6\u505a\u4e9b\u4ec0\u4e48\uff0c\u6267\u884c\u4e9b\u4ec0\u4e48\u3002 \u6211\u4eec\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u4f7f\u7528 if else \u8bed\u53e5\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5076\u6570\u6216\u5947\u6570\uff0c\u5982\u679c\u662f\u5076\u6570\u5219\u8f93\u51fa \u5076\u6570 \uff0c\u5982\u679c\u662f\u5947\u6570\u5219\u8f93\u51fa \u5947\u6570 \u3002 1 2 3 4 5 6 7 8 fn main () { let num = 12 ; if num % 2 == 0 { println! ( \"\u5076\u6570\" ); //\u221a } else { println! ( \"\u5947\u6570\" ); } } if...else if... \u8bed\u53e5 \u00b6 if...else if... \u7279\u70b9\u662f\u90a3\u4e2a\u6761\u4ef6\u5148\u6ee1\u8db3\u5c31\u6267\u884c\u90a3\u5757\u4ee3\u7801\u3002 \u6211\u4eec\u4f7f\u7528\u5d4c\u5957 if \u8bed\u53e5\u6765\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u5224\u65ad\u67d0\u4e2a\u503c\u662f \u5927\u4e8e\u3001\u5c0f\u4e8e\u3001\u7b49\u4e8e 0 \u3002 1 2 3 4 5 6 7 8 9 10 fn main () { let num = 2 ; if num > 0 { println! ( \"{} is positive\" , num ); // \u221a } else if num < 0 { println! ( \"{} is negative\" , num ); } else { println! ( \"{} is neither positive nor negative\" , num ) ; } } match \u8bed\u53e5 \u00b6 match \u8bed\u53e5\u7528\u4e8e\u68c0\u67e5 \u67d0\u4e2a\u5f53\u524d\u7684\u503c \u662f\u5426\u5339\u914d \u4e00\u7ec4/\u5217\u503c \u4e2d\u7684\u67d0\u4e00\u4e2a\u3002 \u5982\u679c\u4f60\u4f1a C \u8bed\u8a00\uff0c\u90a3\u4e48 Rust \u4e2d\u7684 match \u8868\u8fbe\u5f0f\u5219\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u4e2d\u7684 switch \u8bed\u53e5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 // match \u8bed\u53e5\u6709\u8fd4\u56de\u503c\uff0c\u5b83\u628a \u5339\u914d\u503c \u540e\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u5f53\u4f5c\u8fd4\u56de\u503c\u3002 let expressionResult = match variable_expression { constant_expr1 => { // \u8bed\u53e5; }, constant_expr2 => { // \u8bed\u53e5; }, _ => { // \u9ed8\u8ba4 // \u5176\u5b83\u8bed\u53e5 } }; \u9996\u5148\u8981\u8bf4\u660e\u7684\u662f match \u5173\u952e\u5b57\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u4e0d\u5fc5\u62ec\u5728\u62ec\u53f7\u4e2d\u3002\u4e5f\u5c31\u662f variable_expression \u4e0d\u9700\u8981\u7528\u4e00\u5bf9 \u62ec\u53f7( () ) \u62ec\u8d77\u6765\u3002 \u5176\u6b21\uff0c match \u8bed\u53e5\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u8ba1\u7b97 variable_expression \u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7136\u540e\u628a\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u548c\u6bcf\u4e00\u4e2a constant_exprN \u5339\u914d\uff0c\u4f7f\u7528\u7684\u662f \u5168\u7b49\u4e8e \u4e5f\u5c31\u662f === \u6765\u5339\u914d\u3002\u5982\u679c\u5339\u914d\u6210\u529f\u5219\u6267\u884c => {} \u91cc\u9762\u7684\u8bed\u53e5\u3002 \u5982\u679c variable_expression \u8868\u8fbe\u5f0f\u7684\u503c\u6ca1\u6709\u548c\u4efb\u4f55\u4e00\u4e2a constant_exprN \u5339\u914d\uff0c\u90a3\u4e48\u5b83\u4f1a\u9ed8\u8ba4\u5339\u914d _\u3002 \u56e0\u6b64\uff0c\u5f53\u6ca1\u6709\u5339\u914d\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u6267\u884c _ => {} \u4e2d\u7684\u8bed\u53e5\u3002 match \u8bed\u53e5\u6709\u8fd4\u56de\u503c\uff0c\u5b83\u628a \u5339\u914d\u503c \u540e\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u5f53\u4f5c\u8fd4\u56de\u503c\u3002 _ => {} \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 match \u8bed\u53e5\u53ef\u4ee5\u6ca1\u6709\u5b83\u3002 1 2 3 4 5 6 7 8 9 10 let month = \"\u4e8c\u6708\" ; let english_month = match month { \"\u4e00\u6708\" => \"January\" , \"\u4e8c\u6708\" => \"February\" , // \u2705 \"\u4e09\u6708\" => \"March\" , \"\u56db\u6708\" => \"April\" , _ => \"Unknown\" , }; println! ( \"{}\" , english_month )","title":"Rust \u6761\u4ef6\u5224\u65ad"},{"location":"docs/condition/#_1","text":"\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\uff0c \u6761\u4ef6\u8868\u8fbe\u5f0f \u53c8\u79f0\u6761\u4ef6\u8fd0\u7b97\u5f0f\u3001 \u6761\u4ef6\u8868\u793a\u5f0f \uff0c\u662f\u4e00\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u529f\u80fd\uff0c\u5b83\u53ef\u4ee5\u7528\u6765\u51b3\u5b9a\u5f53\u7a0b\u5e8f\u6307\u5b9a\u7684\u5e03\u5c14\u8fd0\u7b97\u503c\u4e3a\u771f\u6216\u5047\u65f6\uff0c\u7a0b\u5e8f\u63a5\u4e0b\u6765\u5c06\u4f1a\u91c7\u53d6\u7684\u884c\u52a8\u3002 \u8ba1\u7b97\u673a\u4e4b\u6240\u4ee5\u80fd\u505a\u5f88\u591a\u81ea\u52a8\u5316\u7684\u4efb\u52a1\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u81ea\u5df1\u505a\u6761\u4ef6\u5224\u65ad\u3002 \u8ba1\u7b97\u673a\u7a0b\u5e8f\u4f1a\u6839\u636e\u6761\u4ef6\u4e0d\u540c\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u3002","title":"\u6982 \u5ff5"},{"location":"docs/condition/#if","text":"Rust \u8bed\u8a00\u4e2d\u4f7f\u7528 if \u8bed\u53e5\u6765\u6a21\u62df\u73b0\u5b9e\u751f\u6d3b\u4e2d\u8fd9\u79cd \u5982\u679c...\u5c31 \u7684\u60c5\u51b5. 1 2 3 4 5 6 7 8 fn main () { let age = 22 ; if age > 18 { println! ( \"\u4f60\u5df2\u7ecf\u6210\u5e74\u4e86\uff01\" ) } } // OUT // \u4f60\u5df2\u7ecf\u6210\u5e74\u4e86\uff01","title":"if \u8bed\u53e5\u8bed\u6cd5"},{"location":"docs/condition/#if-else","text":"\u5728 if else \u8bed\u53e5\u4e2d\uff0c if \u8bed\u53e5\u624d\u662f\u6700\u4e3b\u8981\u7684\u3002\u5982\u679c \u6761\u4ef6 \u4e3a\u771f\uff0c\u5c31\u6ca1 else \u8bed\u53e5\u5565\u4e8b\u4e86\u3002 \u5176\u5b9e if \u8bed\u53e5\u540e\u9762\u7684 else \u8bed\u53e5\u662f\u53ef\u9009\u7684\u3002\u5c31\u50cf\u6211\u4eec\u6240\u8bf4\u7684\uff0c\u5982\u679c \u6761\u4ef6 \u4e3a\u5047\u5c31\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u90a3\u8981 else \u8bed\u53e5\u6709\u4ec0\u4e48\u7528\u5462\uff1f else \u8bed\u53e5\u7684\u552f\u4e00\u4f5c\u7528\uff0c\u5c31\u662f if \u8bed\u53e5\u4e2d\u7684 \u6761\u4ef6 \u4e3a\u5047\u65f6\u505a\u4e9b\u4ec0\u4e48\uff0c\u6267\u884c\u4e9b\u4ec0\u4e48\u3002 \u6211\u4eec\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u4f7f\u7528 if else \u8bed\u53e5\u6765\u5224\u65ad\u4e00\u4e2a\u6570\u662f\u5426\u5076\u6570\u6216\u5947\u6570\uff0c\u5982\u679c\u662f\u5076\u6570\u5219\u8f93\u51fa \u5076\u6570 \uff0c\u5982\u679c\u662f\u5947\u6570\u5219\u8f93\u51fa \u5947\u6570 \u3002 1 2 3 4 5 6 7 8 fn main () { let num = 12 ; if num % 2 == 0 { println! ( \"\u5076\u6570\" ); //\u221a } else { println! ( \"\u5947\u6570\" ); } }","title":"if else \u8bed\u53e5"},{"location":"docs/condition/#ifelse-if","text":"if...else if... \u7279\u70b9\u662f\u90a3\u4e2a\u6761\u4ef6\u5148\u6ee1\u8db3\u5c31\u6267\u884c\u90a3\u5757\u4ee3\u7801\u3002 \u6211\u4eec\u4f7f\u7528\u5d4c\u5957 if \u8bed\u53e5\u6765\u5199\u4e00\u6bb5\u4ee3\u7801\uff0c\u5224\u65ad\u67d0\u4e2a\u503c\u662f \u5927\u4e8e\u3001\u5c0f\u4e8e\u3001\u7b49\u4e8e 0 \u3002 1 2 3 4 5 6 7 8 9 10 fn main () { let num = 2 ; if num > 0 { println! ( \"{} is positive\" , num ); // \u221a } else if num < 0 { println! ( \"{} is negative\" , num ); } else { println! ( \"{} is neither positive nor negative\" , num ) ; } }","title":"if...else if... \u8bed\u53e5"},{"location":"docs/condition/#match","text":"match \u8bed\u53e5\u7528\u4e8e\u68c0\u67e5 \u67d0\u4e2a\u5f53\u524d\u7684\u503c \u662f\u5426\u5339\u914d \u4e00\u7ec4/\u5217\u503c \u4e2d\u7684\u67d0\u4e00\u4e2a\u3002 \u5982\u679c\u4f60\u4f1a C \u8bed\u8a00\uff0c\u90a3\u4e48 Rust \u4e2d\u7684 match \u8868\u8fbe\u5f0f\u5219\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u4e2d\u7684 switch \u8bed\u53e5\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 // match \u8bed\u53e5\u6709\u8fd4\u56de\u503c\uff0c\u5b83\u628a \u5339\u914d\u503c \u540e\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u5f53\u4f5c\u8fd4\u56de\u503c\u3002 let expressionResult = match variable_expression { constant_expr1 => { // \u8bed\u53e5; }, constant_expr2 => { // \u8bed\u53e5; }, _ => { // \u9ed8\u8ba4 // \u5176\u5b83\u8bed\u53e5 } }; \u9996\u5148\u8981\u8bf4\u660e\u7684\u662f match \u5173\u952e\u5b57\u540e\u9762\u7684\u8868\u8fbe\u5f0f\u4e0d\u5fc5\u62ec\u5728\u62ec\u53f7\u4e2d\u3002\u4e5f\u5c31\u662f variable_expression \u4e0d\u9700\u8981\u7528\u4e00\u5bf9 \u62ec\u53f7( () ) \u62ec\u8d77\u6765\u3002 \u5176\u6b21\uff0c match \u8bed\u53e5\u5728\u6267\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u8ba1\u7b97 variable_expression \u8868\u8fbe\u5f0f\u7684\u503c\uff0c\u7136\u540e\u628a\u8ba1\u7b97\u540e\u7684\u7ed3\u679c\u548c\u6bcf\u4e00\u4e2a constant_exprN \u5339\u914d\uff0c\u4f7f\u7528\u7684\u662f \u5168\u7b49\u4e8e \u4e5f\u5c31\u662f === \u6765\u5339\u914d\u3002\u5982\u679c\u5339\u914d\u6210\u529f\u5219\u6267\u884c => {} \u91cc\u9762\u7684\u8bed\u53e5\u3002 \u5982\u679c variable_expression \u8868\u8fbe\u5f0f\u7684\u503c\u6ca1\u6709\u548c\u4efb\u4f55\u4e00\u4e2a constant_exprN \u5339\u914d\uff0c\u90a3\u4e48\u5b83\u4f1a\u9ed8\u8ba4\u5339\u914d _\u3002 \u56e0\u6b64\uff0c\u5f53\u6ca1\u6709\u5339\u914d\u65f6\uff0c\u9ed8\u8ba4\u4f1a\u6267\u884c _ => {} \u4e2d\u7684\u8bed\u53e5\u3002 match \u8bed\u53e5\u6709\u8fd4\u56de\u503c\uff0c\u5b83\u628a \u5339\u914d\u503c \u540e\u6267\u884c\u7684\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u5f53\u4f5c\u8fd4\u56de\u503c\u3002 _ => {} \u8bed\u53e5\u662f\u53ef\u9009\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4 match \u8bed\u53e5\u53ef\u4ee5\u6ca1\u6709\u5b83\u3002 1 2 3 4 5 6 7 8 9 10 let month = \"\u4e8c\u6708\" ; let english_month = match month { \"\u4e00\u6708\" => \"January\" , \"\u4e8c\u6708\" => \"February\" , // \u2705 \"\u4e09\u6708\" => \"March\" , \"\u56db\u6708\" => \"April\" , _ => \"Unknown\" , }; println! ( \"{}\" , english_month )","title":"match \u8bed\u53e5"},{"location":"docs/environment/","text":"Rust\u5f00\u53d1\u73af\u5883\u642d\u5efa \u00b6 Rust \u8bed\u8a00\u7684\u73af\u5883\u914d\u7f6e\u8fd8\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u5b98\u65b9\u63d0\u4f9b\u4e86 rustup \u8fd9\u4e2a\u4e00\u6b65\u914d\u7f6e\u5de5\u5177\uff0c rustup \u662f Rust \u5b98\u65b9\u63a8\u51fa\u7684\u57fa\u4e8e \u7ec8\u7aef/\u63a7\u5236\u53f0/shell \u7684\u5de5\u5177\uff0c\u53ef\u7528\u4e8e\u7ba1\u7406 Rust \u7248\u672c\u548c\u76f8\u5173\u5de5\u5177\u3002 Linux\u548cMac\u4e0b\u914d\u7f6e\u5b89\u88c5\u73af\u5883 \u00b6 Linux \u548c Mac \u4e0a\u914d\u7f6e\u73af\u5883\u6bd4\u8f83\u7b80\u5355\uff0c\u4f60\u53ea\u9700\u8981\u5728\u4f60\u7684\u7ec8\u7aef\u91cc\u9762\u6267\u884c\u4e0b\u9762\u547d\u4ee4\u5373\u53ef\u5b89\u88c5: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f\u8f93\u5165: rustc --version \u5373\u53ef\uff01 Windows \u4e0a\u5b89\u88c5 Rust \u00b6 Windows \u4e0a\u5b89\u88c5\u4efb\u4f55\u8bed\u8a00\u7684\u5f00\u53d1\u73af\u5883\u90fd\u6709\u4e00\u70b9\u590d\u6742\uff0c Rust \u4e5f\u65e0\u6cd5\u907f\u514d\u8fd9\u4e00\u70b9\uff0c Windows \u4e0a\u8fd0\u884c Rust \u7f16\u8bd1\u5668\u9700\u8981 C++ \u5f00\u53d1\u73af\u5883,\u63a8\u8350\u7684\u505a\u6cd5\u662f\u5b89\u88c5 Visual Studio 2015 \u6216\u66f4\u9ad8\u7684\u7248\u672c\uff0c\u7136\u540e\u4f60\u6253 https://www.rust-lang.org/ \u4e0b\u8f7d\u5bf9\u5e94\u6587\u4ef6\u5373\u53ef\uff0c\u53cc\u51fb\u4e0b\u8f7d\u597d\u7684 rustup-init.exe \u6587\u4ef6\uff0c\u9009\u62e9\u7b2c 1 \u9879\uff0c\u7136\u540e\u4f60\u5c31\u4e00\u8def\u4e0b\u4e00\u6b65\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u9759\u9759\u5730\u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u5373\u53ef\u3002 Rust \u88ab\u5b89\u88c5\u5230\u76ee\u5f55 C:\\Users\\{PC}\\.cargo\\bin \u91cc\u6253\u5f00\u4f60\u81ea\u5df1\u7684 C:\\Users\\{PC}\\.cargo\\bin \u76ee\u5f55\uff0c\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u6587\u4ef6\u5217\u8868\u3002 cargo-fmt.exe cargo.exe rls.exe rust-gdb.exe rust-lldb.exe rustc.exe // \u8fd9\u662frust\u7f16\u8bd1\u5668 rustdoc.exe rustfmt.exe rustup.exe \u4f60\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u76ee\u5f55\u6dfb\u52a0\u5230\u4f60\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u91cc\uff0c\u5982\u679c\u5728\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898\u4f60\u53ef\u4ee5\u52a0 \u5173\u4e8e\u672c\u7ad9 \u4e0a\u7684\u8ba8\u8bba\u7ec4\uff0c\u8fdb\u6765\u8ba8\u8bba\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002 \u4ecb\u7ecd\u4e00\u4e0brustup \u00b6 rustup \u662f Rust \u5b98\u65b9\u7684\u7248\u672c\u7ba1\u7406\u5de5\u5177\uff0c\u5e94\u5f53\u4f5c\u4e3a\u5b89\u88c5 Rust \u7684\u9996\u9009\u3002\u56e0\u4e3a Rust \u7684\u66f4\u65b0\u901f\u5ea6\u5f88\u5feb\uff0c\u652f\u6301\u7684\u7248\u672c\u5f88\u591a\uff0c\u6709\u65f6\u65b0\u7248\u672c\u662f\u4e0d\u4f1a\u5b8c\u7f8e\u517c\u5bb9\u65e7\u7248\u672c\u7684\uff0c\u540c\u65f6\u8fd8\u652f\u6301\u591a\u5e73\u53f0\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6240\u4ee5\u5c31\u6709\u4e86 rustup \u8fd9\u4e2a Rust \u5de5\u5177\u94fe\u7684\u7ba1\u7406\u5de5\u5177\u3002 \u7279 \u6027 \u7ba1\u7406\u5b89\u88c5\u591a\u4e2a\u5b98\u65b9\u7248\u672c\u7684 Rust \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u3002 \u914d\u7f6e\u57fa\u4e8e\u76ee\u5f55\u7684 Rust \u5de5\u5177\u94fe\u3002 \u5b89\u88c5\u548c\u66f4\u65b0\u6765\u81ea Rust \u7684\u53d1\u5e03\u901a\u9053: nightly, beta \u548c stable \u3002 \u63a5\u6536\u6765\u81ea\u53d1\u5e03\u901a\u9053\u66f4\u65b0\u7684\u901a\u77e5\u3002 \u4ece\u5b98\u65b9\u5b89\u88c5\u5386\u53f2\u7248\u672c\u7684 nightly \u5de5\u5177\u94fe\u3002 \u901a\u8fc7\u6307\u5b9a stable \u7248\u672c\u6765\u5b89\u88c5\u3002 \u5b89\u88c5\u989d\u5916\u7684 std \u7528\u4e8e\u4ea4\u53c9\u7f16\u8bd1\u3002 \u5b89\u88c5\u81ea\u5b9a\u4e49\u7684\u5de5\u5177\u94fe\u3002 \u72ec\u7acb\u6bcf\u4e2a\u5b89\u88c5\u7684 Cargo metadata \u3002 \u6821\u9a8c\u4e0b\u8f7d\u7684 hash \u503c\u3002 \u6821\u9a8c\u7b7e\u540d (\u5982\u679c GPG \u5b58\u5728)\u3002 \u65ad\u70b9\u7eed\u4f20\u3002 \u53ea\u4f9d\u8d56 bash, curl \u548c\u5e38\u89c1 unix \u5de5\u5177\u3002 \u652f\u6301 Linux, OS X, Windows(via MSYS2) \u3002 \u4f7f\u7528 rustup \u5b89\u88c5\u7684\u65f6\u5019\uff0c\u4ed6\u4f1a\u5e2e\u4f60\u5b89\u88c5\u4e00\u4e0b\u5de5\u5177: rustc \u7f16\u8bd1\u5668 rust-std \u6807\u51c6\u5e93 cargo \u5305\u7ba1\u7406\u5de5\u5177 rust-doc \u8bf4\u660e\u6587\u6863","title":"Rust \u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"docs/environment/#rust","text":"Rust \u8bed\u8a00\u7684\u73af\u5883\u914d\u7f6e\u8fd8\u662f\u76f8\u5bf9\u7b80\u5355\u7684\uff0c\u56e0\u4e3a\u5b98\u65b9\u63d0\u4f9b\u4e86 rustup \u8fd9\u4e2a\u4e00\u6b65\u914d\u7f6e\u5de5\u5177\uff0c rustup \u662f Rust \u5b98\u65b9\u63a8\u51fa\u7684\u57fa\u4e8e \u7ec8\u7aef/\u63a7\u5236\u53f0/shell \u7684\u5de5\u5177\uff0c\u53ef\u7528\u4e8e\u7ba1\u7406 Rust \u7248\u672c\u548c\u76f8\u5173\u5de5\u5177\u3002","title":"Rust\u5f00\u53d1\u73af\u5883\u642d\u5efa"},{"location":"docs/environment/#linuxmac","text":"Linux \u548c Mac \u4e0a\u914d\u7f6e\u73af\u5883\u6bd4\u8f83\u7b80\u5355\uff0c\u4f60\u53ea\u9700\u8981\u5728\u4f60\u7684\u7ec8\u7aef\u91cc\u9762\u6267\u884c\u4e0b\u9762\u547d\u4ee4\u5373\u53ef\u5b89\u88c5: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh \u67e5\u770b\u662f\u5426\u5b89\u88c5\u6210\u529f\u8f93\u5165: rustc --version \u5373\u53ef\uff01","title":"Linux\u548cMac\u4e0b\u914d\u7f6e\u5b89\u88c5\u73af\u5883"},{"location":"docs/environment/#windows-rust","text":"Windows \u4e0a\u5b89\u88c5\u4efb\u4f55\u8bed\u8a00\u7684\u5f00\u53d1\u73af\u5883\u90fd\u6709\u4e00\u70b9\u590d\u6742\uff0c Rust \u4e5f\u65e0\u6cd5\u907f\u514d\u8fd9\u4e00\u70b9\uff0c Windows \u4e0a\u8fd0\u884c Rust \u7f16\u8bd1\u5668\u9700\u8981 C++ \u5f00\u53d1\u73af\u5883,\u63a8\u8350\u7684\u505a\u6cd5\u662f\u5b89\u88c5 Visual Studio 2015 \u6216\u66f4\u9ad8\u7684\u7248\u672c\uff0c\u7136\u540e\u4f60\u6253 https://www.rust-lang.org/ \u4e0b\u8f7d\u5bf9\u5e94\u6587\u4ef6\u5373\u53ef\uff0c\u53cc\u51fb\u4e0b\u8f7d\u597d\u7684 rustup-init.exe \u6587\u4ef6\uff0c\u9009\u62e9\u7b2c 1 \u9879\uff0c\u7136\u540e\u4f60\u5c31\u4e00\u8def\u4e0b\u4e00\u6b65\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981\u9759\u9759\u5730\u7b49\u5f85\u5b89\u88c5\u5b8c\u6210\u5373\u53ef\u3002 Rust \u88ab\u5b89\u88c5\u5230\u76ee\u5f55 C:\\Users\\{PC}\\.cargo\\bin \u91cc\u6253\u5f00\u4f60\u81ea\u5df1\u7684 C:\\Users\\{PC}\\.cargo\\bin \u76ee\u5f55\uff0c\u53ef\u4ee5\u770b\u5230\u4e0b\u9762\u7684\u6587\u4ef6\u5217\u8868\u3002 cargo-fmt.exe cargo.exe rls.exe rust-gdb.exe rust-lldb.exe rustc.exe // \u8fd9\u662frust\u7f16\u8bd1\u5668 rustdoc.exe rustfmt.exe rustup.exe \u4f60\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u76ee\u5f55\u6dfb\u52a0\u5230\u4f60\u7cfb\u7edf\u73af\u5883\u53d8\u91cf\u91cc\uff0c\u5982\u679c\u5728\u5b89\u88c5\u51fa\u73b0\u4e86\u95ee\u9898\u4f60\u53ef\u4ee5\u52a0 \u5173\u4e8e\u672c\u7ad9 \u4e0a\u7684\u8ba8\u8bba\u7ec4\uff0c\u8fdb\u6765\u8ba8\u8bba\u4f60\u9047\u5230\u7684\u95ee\u9898\u3002","title":"Windows \u4e0a\u5b89\u88c5 Rust"},{"location":"docs/environment/#rustup","text":"rustup \u662f Rust \u5b98\u65b9\u7684\u7248\u672c\u7ba1\u7406\u5de5\u5177\uff0c\u5e94\u5f53\u4f5c\u4e3a\u5b89\u88c5 Rust \u7684\u9996\u9009\u3002\u56e0\u4e3a Rust \u7684\u66f4\u65b0\u901f\u5ea6\u5f88\u5feb\uff0c\u652f\u6301\u7684\u7248\u672c\u5f88\u591a\uff0c\u6709\u65f6\u65b0\u7248\u672c\u662f\u4e0d\u4f1a\u5b8c\u7f8e\u517c\u5bb9\u65e7\u7248\u672c\u7684\uff0c\u540c\u65f6\u8fd8\u652f\u6301\u591a\u5e73\u53f0\u4ea4\u53c9\u7f16\u8bd1\uff0c\u6240\u4ee5\u5c31\u6709\u4e86 rustup \u8fd9\u4e2a Rust \u5de5\u5177\u94fe\u7684\u7ba1\u7406\u5de5\u5177\u3002 \u7279 \u6027 \u7ba1\u7406\u5b89\u88c5\u591a\u4e2a\u5b98\u65b9\u7248\u672c\u7684 Rust \u4e8c\u8fdb\u5236\u7a0b\u5e8f\u3002 \u914d\u7f6e\u57fa\u4e8e\u76ee\u5f55\u7684 Rust \u5de5\u5177\u94fe\u3002 \u5b89\u88c5\u548c\u66f4\u65b0\u6765\u81ea Rust \u7684\u53d1\u5e03\u901a\u9053: nightly, beta \u548c stable \u3002 \u63a5\u6536\u6765\u81ea\u53d1\u5e03\u901a\u9053\u66f4\u65b0\u7684\u901a\u77e5\u3002 \u4ece\u5b98\u65b9\u5b89\u88c5\u5386\u53f2\u7248\u672c\u7684 nightly \u5de5\u5177\u94fe\u3002 \u901a\u8fc7\u6307\u5b9a stable \u7248\u672c\u6765\u5b89\u88c5\u3002 \u5b89\u88c5\u989d\u5916\u7684 std \u7528\u4e8e\u4ea4\u53c9\u7f16\u8bd1\u3002 \u5b89\u88c5\u81ea\u5b9a\u4e49\u7684\u5de5\u5177\u94fe\u3002 \u72ec\u7acb\u6bcf\u4e2a\u5b89\u88c5\u7684 Cargo metadata \u3002 \u6821\u9a8c\u4e0b\u8f7d\u7684 hash \u503c\u3002 \u6821\u9a8c\u7b7e\u540d (\u5982\u679c GPG \u5b58\u5728)\u3002 \u65ad\u70b9\u7eed\u4f20\u3002 \u53ea\u4f9d\u8d56 bash, curl \u548c\u5e38\u89c1 unix \u5de5\u5177\u3002 \u652f\u6301 Linux, OS X, Windows(via MSYS2) \u3002 \u4f7f\u7528 rustup \u5b89\u88c5\u7684\u65f6\u5019\uff0c\u4ed6\u4f1a\u5e2e\u4f60\u5b89\u88c5\u4e00\u4e0b\u5de5\u5177: rustc \u7f16\u8bd1\u5668 rust-std \u6807\u51c6\u5e93 cargo \u5305\u7ba1\u7406\u5de5\u5177 rust-doc \u8bf4\u660e\u6587\u6863","title":"\u4ecb\u7ecd\u4e00\u4e0brustup"},{"location":"docs/function/","text":"Rust \u51fd\u6570 \u00b6 \u51fd\u6570 \u662f\u4e00\u7ec4\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u4ee3\u7801\u5757\uff0c\u51fd\u6570\u662f\u4e00\u6bb5\u53ef\u8bfb\u7684\uff0c\u53ef\u7ef4\u62a4\u7684\u548c\u53ef\u91cd\u7528\u7684\u4ee3\u7801\u8bed\u53e5\u5757\u3002\u6bcf\u4e2a Rust \u7a0b\u5e8f\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5373\u4e3b\u51fd\u6570 main() \uff0c\u9664\u4e86\u4f7f\u7528 Rust \u6838\u5fc3\u548c\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u51fd\u6570\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u81ea\u5df1\u7684\u51fd\u6570\u3002 \u51fd\u6570\u58f0\u660e \u00b6 \u51fd\u6570\u8bf4\u660e \u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u4e00\u4e2a \u51fd\u6570\u7684\u540d\u79f0 \u3001 \u53d8\u91cf \u3001\u548c \u8fd4\u56de\u503c\u7c7b\u578b \u3002\u8fd9\u4e09\u4e2a\u5408\u5728\u4e00\u8d77\u7ec4\u6210\u4e86 \u51fd\u6570\u7684\u7b7e\u540d \uff0c \u51fd\u6570\u7b7e\u540d \u7684\u4f5c\u7528\u5c31\u662f\u9632\u6b62\u51fa\u73b0\u4e24\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u3002 \u51fd\u6570\u5b9a\u4e49 \u00b6 \u51fd\u6570 \u53ef\u4ee5\u5e2e\u6211\u4eec\u628a\u53ef\u4ee5\u590d\u7528\u7684\u4ee3\u7801\u7ec4\u88c5\u5230\u4e00\u4e2a\u51fd\u6570\u5757\u91cc\u9762\uff0c\u65b9\u4fbf\u5728\u5176\u4ed6\u5730\u65b9\u8fdb\u884c\u8c03\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4ee3\u7801\u5212\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u903b\u8f91\u66f4\u7b80\u5355\u3002 \u56e0\u6b64\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u9996\u5148\u60f3\u7684\u5e76\u4e0d\u662f\u6211\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u6211\u8fd9\u4e2a\u4efb\u52a1\u8981\u600e\u4e48\u505a\uff0c\u8981\u5b9a\u4e49\u54ea\u4e9b\u51fd\u6570\u6765\u5b8c\u6210\u3002 \u5b9a\u4e49\u51fd\u6570\u65f6\u5fc5\u987b\u4ee5 fn \u5173\u952e\u5b57\u5f00\u5934\uff0c fn \u5173\u952e\u5b57\u662f function \u7684\u7f29\u5199\uff0c\u51fd\u6570\u5185\u90e8\u5fc5\u987b\u5305\u542b\u51fd\u6570\u8981\u6267\u884c\u7684\u5177\u4f53\u4ee3\u7801\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u4ee3\u7801\u79f0\u4e4b\u4e3a \u51fd\u6570\u4f53 \u3002 \u5b9a\u4e49\u51fd\u6570\u7684\u8bed\u6cd5\u5982\u4e0b\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u5fc5\u987b\u4f7f\u7528 fn \u5173\u952e\u5b57\u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u8981\u5b9a\u4e49\u7684 \u51fd\u6570\u540d \u3002 1 2 3 fn funcation_name ( parma : data_type ){ // \u51fd\u6570\u4ee3\u7801 } \u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\u540d\u4e3a say_hi \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f 1 2 3 4 fn say_hi () { println! ( \"\ud83d\udc4b Hello!\" ); } // \ud83d\udc4b Hello! \u4e3a\u4e86\u8fd0\u884c\u4e00\u4e2a\u51fd\u6570\u9996\u5148\u5fc5\u987b\u8c03\u7528\u5b83\u3002\u51fd\u6570\u4e0d\u50cf\u666e\u901a\u7684\u8bed\u53e5\uff0c\u5199\u5b8c\u4e86\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u51fd\u6570\u9700\u8981\u8c03\u7528\u624d\u4f1a\u88ab\u6267\u884c\u3002 \ud83d\udc47\u4e0b\u9762\uff0c\u51fd\u6570 main() \u5c31\u662f \u8c03\u7528\u8005\u51fd\u6570 \uff0c\u4e5f\u5c31\u662f \u8c03\u7528\u8005 \u3002 1 2 3 4 5 6 7 8 fn main () { //\u8c03\u7528\u51fd\u6570 out: \ud83d\udc4b Hello! say_hi (); } fn say_hi () { println! ( \"\ud83d\udc4b Hello!\" ); } \u51fd\u6570\u8fd4\u56de\u503c \u00b6 \u5728\u6211\u4eec\u7684\u51fd\u6570\u4ee3\u7801\u5757\u53ef\u80fd\u9700\u8981\u5904\u7406\u4e00\u4e9b\u903b\u8f91\uff0c\u7136\u540e\u628a\u5904\u7406\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u503c\u79f0\u4e3a \u51fd\u6570\u8fd4\u56de\u503c \u3002 Rust \u8bed\u8a00\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u8bed\u6cd5\u4e0e\u5176\u5b83\u8bed\u8a00\u6709\u6240\u4e0d\u540c\uff0c\u5b83\u662f\u901a\u8fc7\u5728 ()\u5c0f\u62ec\u53f7\u540e\u9762 \u4f7f\u7528 \u7bad\u5934 -> \u52a0\u4e0a\u6570\u636e\u7c7b\u578b \u6765\u5b9a\u4e49\u7684\u3002 \u6709 return \u8bed\u53e5: 1 2 3 4 5 6 7 8 fn main () { assert_eq! ( 10 , sum ()); } // \u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570 fn sum () -> i8 { return 5 + 5 ; } \u6ca1\u6709 return \u8bed\u53e5\u5219\u4f7f\u7528\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 fn main () { assert_eq! ( assert_sum (), sum ()); } fn sum () -> i8 { return 5 + 5 ; } fn assert_sum () -> i8 { 5 + 5 // \u6700\u540e\u4e00\u6761\u8bed\u53e5\u8fd4\u56de \u5e76\u4e14\u6ca1\u6709\u2018;\u2019 } \u51fd\u6570\u53c2\u6570 \u00b6 \u51fd\u6570\u53c2\u6570 \u662f\u4e00\u79cd\u5c06\u5916\u90e8\u53d8\u91cf\u548c\u503c\u5e26\u7ed9\u51fd\u6570\u5185\u90e8\u4ee3\u7801\u7684\u4e00\u79cd\u673a\u5236\uff0c\u51fd\u6570\u53c2\u6570\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\uff0c\u51fd\u6570\u7b7e\u540d\u7684\u6700\u5927\u4f5c\u7528\uff0c\u5c31\u662f\u9632\u6b62\u5b9a\u4e49\u4e24\u4e2a\u76f8\u540c\u7684\u7b7e\u540d\u7684\u51fd\u6570\u3002 \u6211\u4eec\u628a\u51fd\u6570\u5b9a\u4e49\u65f6\u6307\u5b9a\u7684\u53c2\u6570\u540d\u53eb\u505a \u5f62\u53c2 \u628a\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53d8\u91cf\u503c\u53eb\u505a \u5b9e\u53c2 \u51fd\u6570\u53c2\u6570\u6709\u4e24\u79cd\u4f20\u503c\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u628a \u503c\u7684\u503c\u63a5\u4f20\u9012 \u7ed9\u51fd\u6570\uff0c\u53e6\u4e00\u79cd\u662f\u628a \u503c\u5728\u5185\u5b58\u4e0a\u7684\u4fdd\u5b58\u4f4d\u7f6e \u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4f20\u503c\u8c03\u7528 \u00b6 \u4f20\u503c\u8c03\u7528 \u5c31\u662f\u7b80\u5355\u7684\u628a\u4f20\u9012\u7684\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u7684 \u5f62\u53c2 \uff0c\u4ece\u67d0\u4e9b\u65b9\u9762\u8bf4\u4e86\uff0c\u5c31\u662f\u628a\u51fd\u6570\u53c2\u6570\u4e5f\u8d4b\u503c\u4e3a\u4f20\u9012\u7684\u503c\u3002 \u56e0\u4e3a\u662f\u8d4b\u503c\uff0c\u6240\u4ee5\u51fd\u6570\u53c2\u6570\u548c\u4f20\u9012\u7684\u53d8\u91cf\u5176\u5b9e\u662f\u5404\u81ea\u4fdd\u5b58\u4e86\u76f8\u540c\u7684\u503c\uff0c \u4e92\u4e0d\u5f71\u54cd \uff0c\u56e0\u6b64\u51fd\u6570\u5185\u90e8\u4fee\u6539\u51fd\u6570\u53c2\u6570\u7684\u503c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5916\u90e8\u53d8\u91cf\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 fn main () { let name = \"Jarvib\" ; edit_name ( name ); println! ( \"main() Your name is {}\" , name ); // edit_name() Your name is Jarvib Ding // main() Your name is Jarvib } fn edit_name ( mut name : & ' static str ){ name = \"Jarvib Ding\" ; println! ( \"edit_name() Your name is {}\" , name ) } \u5f15\u7528\u4f20\u9012 \u00b6 \u503c\u4f20\u9012\u53ea\u662f\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f46\u5f15\u7528\u4f20\u9012\u5219\u4e0d\u4f1a\uff0c\u5f15\u7528\u4f20\u9012\u628a\u5f53\u524d\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u661f\u53f7 \uff08*\uff09 \u7528\u4e8e\u8bbf\u95ee\u53d8\u91cf param_no \u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u5b58\u50a8\u7684\u53d8\u91cf\u7684\u503c\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u79f0\u4e3a \u89e3\u5f15\u7528 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 fn main () { let mut no : i32 = 22 ; println! ( \"The value of no is:{}\" , no ); mutate_no_to_zero ( & mut no ); println! ( \"The value of no is:{}\" , no ); // The value of no is:22 // The value of no is:0 } fn mutate_no_to_zero ( param_no : & mut i32 ){ * param_no = 0 ; //\u89e3\u5f15\u7528\u64cd\u4f5c }","title":"Rust \u51fd\u6570\u5b9a\u4e49"},{"location":"docs/function/#rust","text":"\u51fd\u6570 \u662f\u4e00\u7ec4\u53ef\u4ee5\u6267\u884c\u7684\u4efb\u52a1\u4ee3\u7801\u5757\uff0c\u51fd\u6570\u662f\u4e00\u6bb5\u53ef\u8bfb\u7684\uff0c\u53ef\u7ef4\u62a4\u7684\u548c\u53ef\u91cd\u7528\u7684\u4ee3\u7801\u8bed\u53e5\u5757\u3002\u6bcf\u4e2a Rust \u7a0b\u5e8f\u90fd\u81f3\u5c11\u6709\u4e00\u4e2a\u51fd\u6570\uff0c\u5373\u4e3b\u51fd\u6570 main() \uff0c\u9664\u4e86\u4f7f\u7528 Rust \u6838\u5fc3\u548c\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\u51fd\u6570\u5916\uff0c\u6211\u4eec\u8fd8\u53ef\u4ee5\u81ea\u5df1\u5b9a\u4e49\u81ea\u5df1\u7684\u51fd\u6570\u3002","title":"Rust \u51fd\u6570"},{"location":"docs/function/#_1","text":"\u51fd\u6570\u8bf4\u660e \u5c31\u662f\u544a\u8bc9\u7f16\u8bd1\u5668\u4e00\u4e2a \u51fd\u6570\u7684\u540d\u79f0 \u3001 \u53d8\u91cf \u3001\u548c \u8fd4\u56de\u503c\u7c7b\u578b \u3002\u8fd9\u4e09\u4e2a\u5408\u5728\u4e00\u8d77\u7ec4\u6210\u4e86 \u51fd\u6570\u7684\u7b7e\u540d \uff0c \u51fd\u6570\u7b7e\u540d \u7684\u4f5c\u7528\u5c31\u662f\u9632\u6b62\u51fa\u73b0\u4e24\u4e2a\u76f8\u540c\u7684\u51fd\u6570\u3002","title":"\u51fd\u6570\u58f0\u660e"},{"location":"docs/function/#_2","text":"\u51fd\u6570 \u53ef\u4ee5\u5e2e\u6211\u4eec\u628a\u53ef\u4ee5\u590d\u7528\u7684\u4ee3\u7801\u7ec4\u88c5\u5230\u4e00\u4e2a\u51fd\u6570\u5757\u91cc\u9762\uff0c\u65b9\u4fbf\u5728\u5176\u4ed6\u5730\u65b9\u8fdb\u884c\u8c03\u7528\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u4ee3\u7801\u5212\u5206\u5230\u4e0d\u540c\u7684\u51fd\u6570\u4e2d\uff0c\u8fd9\u6837\u53ef\u4ee5\u4f7f\u5f97\u4ee3\u7801\u53ef\u8bfb\u6027\u66f4\u5f3a\uff0c\u903b\u8f91\u66f4\u7b80\u5355\u3002 \u56e0\u6b64\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u9996\u5148\u60f3\u7684\u5e76\u4e0d\u662f\u6211\u8981\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\uff0c\u800c\u662f\u6211\u8fd9\u4e2a\u4efb\u52a1\u8981\u600e\u4e48\u505a\uff0c\u8981\u5b9a\u4e49\u54ea\u4e9b\u51fd\u6570\u6765\u5b8c\u6210\u3002 \u5b9a\u4e49\u51fd\u6570\u65f6\u5fc5\u987b\u4ee5 fn \u5173\u952e\u5b57\u5f00\u5934\uff0c fn \u5173\u952e\u5b57\u662f function \u7684\u7f29\u5199\uff0c\u51fd\u6570\u5185\u90e8\u5fc5\u987b\u5305\u542b\u51fd\u6570\u8981\u6267\u884c\u7684\u5177\u4f53\u4ee3\u7801\uff0c\u6211\u4eec\u628a\u8fd9\u4e9b\u4ee3\u7801\u79f0\u4e4b\u4e3a \u51fd\u6570\u4f53 \u3002 \u5b9a\u4e49\u51fd\u6570\u7684\u8bed\u6cd5\u5982\u4e0b\uff0c\u5b9a\u4e49\u51fd\u6570\u65f6\u5fc5\u987b\u4f7f\u7528 fn \u5173\u952e\u5b57\u5f00\u5934\uff0c\u540e\u9762\u8ddf\u7740\u8981\u5b9a\u4e49\u7684 \u51fd\u6570\u540d \u3002 1 2 3 fn funcation_name ( parma : data_type ){ // \u51fd\u6570\u4ee3\u7801 } \u4e0b\u9762\u7684\u4ee3\u7801\uff0c\u6211\u4eec\u5b9a\u4e49\u4e86\u4e00\u4e2a\u51fd\u6570\u540d\u4e3a say_hi \u7684\u51fd\u6570\uff0c\u7528\u4e8e\u8f93\u51fa\u4e00\u4e9b\u4fe1\u606f 1 2 3 4 fn say_hi () { println! ( \"\ud83d\udc4b Hello!\" ); } // \ud83d\udc4b Hello! \u4e3a\u4e86\u8fd0\u884c\u4e00\u4e2a\u51fd\u6570\u9996\u5148\u5fc5\u987b\u8c03\u7528\u5b83\u3002\u51fd\u6570\u4e0d\u50cf\u666e\u901a\u7684\u8bed\u53e5\uff0c\u5199\u5b8c\u4e86\u4f1a\u81ea\u52a8\u6267\u884c\uff0c\u51fd\u6570\u9700\u8981\u8c03\u7528\u624d\u4f1a\u88ab\u6267\u884c\u3002 \ud83d\udc47\u4e0b\u9762\uff0c\u51fd\u6570 main() \u5c31\u662f \u8c03\u7528\u8005\u51fd\u6570 \uff0c\u4e5f\u5c31\u662f \u8c03\u7528\u8005 \u3002 1 2 3 4 5 6 7 8 fn main () { //\u8c03\u7528\u51fd\u6570 out: \ud83d\udc4b Hello! say_hi (); } fn say_hi () { println! ( \"\ud83d\udc4b Hello!\" ); }","title":"\u51fd\u6570\u5b9a\u4e49"},{"location":"docs/function/#_3","text":"\u5728\u6211\u4eec\u7684\u51fd\u6570\u4ee3\u7801\u5757\u53ef\u80fd\u9700\u8981\u5904\u7406\u4e00\u4e9b\u903b\u8f91\uff0c\u7136\u540e\u628a\u5904\u7406\u7684\u7ed3\u679c\u8fd4\u56de\u7ed9\u8c03\u7528\u8005\uff0c\u6211\u4eec\u5c06\u8fd9\u4e9b\u503c\u79f0\u4e3a \u51fd\u6570\u8fd4\u56de\u503c \u3002 Rust \u8bed\u8a00\u7684\u8fd4\u56de\u503c\u5b9a\u4e49\u8bed\u6cd5\u4e0e\u5176\u5b83\u8bed\u8a00\u6709\u6240\u4e0d\u540c\uff0c\u5b83\u662f\u901a\u8fc7\u5728 ()\u5c0f\u62ec\u53f7\u540e\u9762 \u4f7f\u7528 \u7bad\u5934 -> \u52a0\u4e0a\u6570\u636e\u7c7b\u578b \u6765\u5b9a\u4e49\u7684\u3002 \u6709 return \u8bed\u53e5: 1 2 3 4 5 6 7 8 fn main () { assert_eq! ( 10 , sum ()); } // \u6709\u8fd4\u56de\u503c\u7684\u51fd\u6570 fn sum () -> i8 { return 5 + 5 ; } \u6ca1\u6709 return \u8bed\u53e5\u5219\u4f7f\u7528\u6700\u540e\u4e00\u6761\u8bed\u53e5\u7684\u7ed3\u679c\u4f5c\u4e3a\u8fd4\u56de\u503c\uff1a 1 2 3 4 5 6 7 8 9 10 11 fn main () { assert_eq! ( assert_sum (), sum ()); } fn sum () -> i8 { return 5 + 5 ; } fn assert_sum () -> i8 { 5 + 5 // \u6700\u540e\u4e00\u6761\u8bed\u53e5\u8fd4\u56de \u5e76\u4e14\u6ca1\u6709\u2018;\u2019 }","title":"\u51fd\u6570\u8fd4\u56de\u503c"},{"location":"docs/function/#_4","text":"\u51fd\u6570\u53c2\u6570 \u662f\u4e00\u79cd\u5c06\u5916\u90e8\u53d8\u91cf\u548c\u503c\u5e26\u7ed9\u51fd\u6570\u5185\u90e8\u4ee3\u7801\u7684\u4e00\u79cd\u673a\u5236\uff0c\u51fd\u6570\u53c2\u6570\u662f\u51fd\u6570\u7b7e\u540d\u7684\u4e00\u90e8\u5206\uff0c\u51fd\u6570\u7b7e\u540d\u7684\u6700\u5927\u4f5c\u7528\uff0c\u5c31\u662f\u9632\u6b62\u5b9a\u4e49\u4e24\u4e2a\u76f8\u540c\u7684\u7b7e\u540d\u7684\u51fd\u6570\u3002 \u6211\u4eec\u628a\u51fd\u6570\u5b9a\u4e49\u65f6\u6307\u5b9a\u7684\u53c2\u6570\u540d\u53eb\u505a \u5f62\u53c2 \u628a\u8c03\u7528\u51fd\u6570\u65f6\u4f20\u9012\u7ed9\u51fd\u6570\u7684\u53d8\u91cf\u503c\u53eb\u505a \u5b9e\u53c2 \u51fd\u6570\u53c2\u6570\u6709\u4e24\u79cd\u4f20\u503c\u65b9\u6cd5\uff0c\u4e00\u79cd\u662f\u628a \u503c\u7684\u503c\u63a5\u4f20\u9012 \u7ed9\u51fd\u6570\uff0c\u53e6\u4e00\u79cd\u662f\u628a \u503c\u5728\u5185\u5b58\u4e0a\u7684\u4fdd\u5b58\u4f4d\u7f6e \u4f20\u9012\u7ed9\u51fd\u6570\u3002","title":"\u51fd\u6570\u53c2\u6570"},{"location":"docs/function/#_5","text":"\u4f20\u503c\u8c03\u7528 \u5c31\u662f\u7b80\u5355\u7684\u628a\u4f20\u9012\u7684\u53d8\u91cf\u7684\u503c\u4f20\u9012\u7ed9\u51fd\u6570\u7684 \u5f62\u53c2 \uff0c\u4ece\u67d0\u4e9b\u65b9\u9762\u8bf4\u4e86\uff0c\u5c31\u662f\u628a\u51fd\u6570\u53c2\u6570\u4e5f\u8d4b\u503c\u4e3a\u4f20\u9012\u7684\u503c\u3002 \u56e0\u4e3a\u662f\u8d4b\u503c\uff0c\u6240\u4ee5\u51fd\u6570\u53c2\u6570\u548c\u4f20\u9012\u7684\u53d8\u91cf\u5176\u5b9e\u662f\u5404\u81ea\u4fdd\u5b58\u4e86\u76f8\u540c\u7684\u503c\uff0c \u4e92\u4e0d\u5f71\u54cd \uff0c\u56e0\u6b64\u51fd\u6570\u5185\u90e8\u4fee\u6539\u51fd\u6570\u53c2\u6570\u7684\u503c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u5916\u90e8\u53d8\u91cf\u7684\u503c\u3002 1 2 3 4 5 6 7 8 9 10 11 12 fn main () { let name = \"Jarvib\" ; edit_name ( name ); println! ( \"main() Your name is {}\" , name ); // edit_name() Your name is Jarvib Ding // main() Your name is Jarvib } fn edit_name ( mut name : & ' static str ){ name = \"Jarvib Ding\" ; println! ( \"edit_name() Your name is {}\" , name ) }","title":"\u4f20\u503c\u8c03\u7528"},{"location":"docs/function/#_6","text":"\u503c\u4f20\u9012\u53ea\u662f\u4f1a\u91cd\u65b0\u521b\u5efa\u4e00\u4e2a\u53d8\u91cf\uff0c\u4f46\u5f15\u7528\u4f20\u9012\u5219\u4e0d\u4f1a\uff0c\u5f15\u7528\u4f20\u9012\u628a\u5f53\u524d\u53d8\u91cf\u7684\u5185\u5b58\u4f4d\u7f6e\u4f20\u9012\u7ed9\u51fd\u6570\u3002 \u4e0a\u9762\u7684\u4ee3\u7801\u4e2d\uff0c\u661f\u53f7 \uff08*\uff09 \u7528\u4e8e\u8bbf\u95ee\u53d8\u91cf param_no \u6307\u5411\u7684\u5185\u5b58\u4f4d\u7f6e\u4e0a\u5b58\u50a8\u7684\u53d8\u91cf\u7684\u503c\uff0c\u8fd9\u79cd\u64cd\u4f5c\u4e5f\u79f0\u4e3a \u89e3\u5f15\u7528 \u3002 1 2 3 4 5 6 7 8 9 10 11 12 fn main () { let mut no : i32 = 22 ; println! ( \"The value of no is:{}\" , no ); mutate_no_to_zero ( & mut no ); println! ( \"The value of no is:{}\" , no ); // The value of no is:22 // The value of no is:0 } fn mutate_no_to_zero ( param_no : & mut i32 ){ * param_no = 0 ; //\u89e3\u5f15\u7528\u64cd\u4f5c }","title":"\u5f15\u7528\u4f20\u9012"},{"location":"docs/hello_world/","text":"\u7528Rust\u5199\u51fa\u4f60\u7b2c\u4e00\u4e2a\u7a0b\u5e8f \u00b6 \u628a Cargo \u5f53\u4f5c\u4e60\u60ef \u00b6 \u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002\u5bf9\u4e8e\u62e5\u6709\u591a\u4e2a crate \u7684\u590d\u6742\u9879\u76ee\uff0c\u4ea4\u7ed9 Cargo \u6765\u534f\u8c03\u6784\u5efa\u5c06\u7b80\u5355\u7684\u591a\u3002 Rust \u5185\u7f6e\u4e86\u4e00\u4e2a\u5305\u7ba1\u7406\u5668 cargo \uff0c\u5b83\u4f1a\u968f\u7740 Rust \u7684\u5b89\u88c5\u800c\u5b89\u88c5\u3002 cargo \u7c7b\u4f3c\u4e8e Python \u4e2d\u7684 pip \u6216 Ruby \u4e2d\u7684 RubyGems \u6216 Node.js \u4e2d\u7684 NPM \u3002 \u5f53\u7136\u4e86 cargo \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5305\u7ba1\u7406\u5668\uff0c\u5b83\u8fd8\u662f Rust \u7684\u9879\u76ee\u7ba1\u7406\u5229\u5668\u3002 Hello, World! \u00b6 Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002\u5927\u591a\u6570 Rustacean \u4eec\u4f7f\u7528 Cargo \u6765\u7ba1\u7406\u4ed6\u4eec\u7684 Rust \u9879\u76ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4e3a\u4f60\u5904\u7406\u5f88\u591a\u4efb\u52a1\uff0c\u6bd4\u5982\u6784\u5efa\u4ee3\u7801\u3001\u4e0b\u8f7d\u4f9d\u8d56\u5e93\u5e76\u7f16\u8bd1\u8fd9\u4e9b\u5e93\u3002 \u68c0\u6d4b\u662f\u5426\u5b89\u88c5\u8f93\u5165\u547d\u4ee4 cargo --version \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e cargo \u7684\u9879\u76ee\uff0c\u5728\u4f60\u9700\u8981\u5de5\u4f5c\u7684\u76ee\u5f55\u8f93\u5165\u4e0b\u9762\u547d\u4ee4 $ cargo new hello_cargo $ cd hello_cargo \u5148\u4e0d\u6025\u7740coding\uff0c\u5148\u770b\u770b Cargo.toml \u6587\u4ef6\u91cc\u9762\u662f\u5565 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [package] # \u9879\u76ee\u540d\u5b57 name = \"hello_cargo\" # \u9879\u76ee\u7248\u672c version = \"0.1.0\" # \u5f00\u53d1\u8005\u4fe1\u606f authors = [\"Dings <deen.job@qq.com>\"] # edition \u5b57\u6bb5\u8868\u660e\u4ee3\u7801\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u7248\u672c\u7f16\u8bd1\u3002\u5982\u679c\u8be5\u5b57\u6bb5\u4e0d\u5b58\u5728\uff0c\u5176\u9ed8\u8ba4\u4e3a 2015 \u4ee5\u63d0\u4f9b\u540e\u5411\u517c\u5bb9\u6027 edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u9879\u76ee\u4f9d\u8d56\u7684\u76f8\u5173\u914d\u7f6e [dependencies] \u76f8\u5173\u547d\u4ee4 cargo build \u6784\u5efa\u4e86\u9879\u76ee cargo run \u7f16\u8bd1\u548c\u8fd0\u884c cargo check \u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee \u5728\u4f60\u7684 main.rs \u5199\u5165\u4ee3\u7801 1 2 3 4 // \u6211\u611f\u89c9\u4f60\u4e0d\u662f\u5199\uff0c\u6211\u4f30\u8ba1\u4f60\u662f\u590d\u5236\u7c98\u8d34\ud83d\ude1c fn main () { println! ( \"Hello, world!\" ); } \u4f7f\u7528 cargo run \u8dd1\u8d77\u6765\u4f60\u7684\u4ee3\u7801 Hello, world! \u5230\u6b64\u4e3a\u6b62\uff0c\u606d\u559c\u4f60\u5199\u51fa\u6765\u4e86\u7b2c\u4e00\u4e2aRust\u7a0b\u5e8f\uff01\uff01\u725b\u6279\ud83d\ude1c","title":"Rust \u60a8\u597d\u4e16\u754c"},{"location":"docs/hello_world/#rust","text":"","title":"\u7528Rust\u5199\u51fa\u4f60\u7b2c\u4e00\u4e2a\u7a0b\u5e8f"},{"location":"docs/hello_world/#cargo","text":"\u5bf9\u4e8e\u7b80\u5355\u9879\u76ee\uff0c Cargo \u5e76\u4e0d\u6bd4 rustc \u63d0\u4f9b\u4e86\u66f4\u591a\u7684\u4f18\u52bf\uff0c\u4e0d\u8fc7\u968f\u7740\u5f00\u53d1\u7684\u6df1\u5165\uff0c\u7ec8\u5c06\u8bc1\u660e\u5176\u4ef7\u503c\u3002\u5bf9\u4e8e\u62e5\u6709\u591a\u4e2a crate \u7684\u590d\u6742\u9879\u76ee\uff0c\u4ea4\u7ed9 Cargo \u6765\u534f\u8c03\u6784\u5efa\u5c06\u7b80\u5355\u7684\u591a\u3002 Rust \u5185\u7f6e\u4e86\u4e00\u4e2a\u5305\u7ba1\u7406\u5668 cargo \uff0c\u5b83\u4f1a\u968f\u7740 Rust \u7684\u5b89\u88c5\u800c\u5b89\u88c5\u3002 cargo \u7c7b\u4f3c\u4e8e Python \u4e2d\u7684 pip \u6216 Ruby \u4e2d\u7684 RubyGems \u6216 Node.js \u4e2d\u7684 NPM \u3002 \u5f53\u7136\u4e86 cargo \u4e0d\u4ec5\u4ec5\u662f\u4e00\u4e2a\u5305\u7ba1\u7406\u5668\uff0c\u5b83\u8fd8\u662f Rust \u7684\u9879\u76ee\u7ba1\u7406\u5229\u5668\u3002","title":"\u628a Cargo \u5f53\u4f5c\u4e60\u60ef"},{"location":"docs/hello_world/#hello-world","text":"Cargo \u662f Rust \u7684\u6784\u5efa\u7cfb\u7edf\u548c\u5305\u7ba1\u7406\u5668\u3002\u5927\u591a\u6570 Rustacean \u4eec\u4f7f\u7528 Cargo \u6765\u7ba1\u7406\u4ed6\u4eec\u7684 Rust \u9879\u76ee\uff0c\u56e0\u4e3a\u5b83\u53ef\u4ee5\u4e3a\u4f60\u5904\u7406\u5f88\u591a\u4efb\u52a1\uff0c\u6bd4\u5982\u6784\u5efa\u4ee3\u7801\u3001\u4e0b\u8f7d\u4f9d\u8d56\u5e93\u5e76\u7f16\u8bd1\u8fd9\u4e9b\u5e93\u3002 \u68c0\u6d4b\u662f\u5426\u5b89\u88c5\u8f93\u5165\u547d\u4ee4 cargo --version \u521b\u5efa\u4e00\u4e2a\u57fa\u4e8e cargo \u7684\u9879\u76ee\uff0c\u5728\u4f60\u9700\u8981\u5de5\u4f5c\u7684\u76ee\u5f55\u8f93\u5165\u4e0b\u9762\u547d\u4ee4 $ cargo new hello_cargo $ cd hello_cargo \u5148\u4e0d\u6025\u7740coding\uff0c\u5148\u770b\u770b Cargo.toml \u6587\u4ef6\u91cc\u9762\u662f\u5565 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [package] # \u9879\u76ee\u540d\u5b57 name = \"hello_cargo\" # \u9879\u76ee\u7248\u672c version = \"0.1.0\" # \u5f00\u53d1\u8005\u4fe1\u606f authors = [\"Dings <deen.job@qq.com>\"] # edition \u5b57\u6bb5\u8868\u660e\u4ee3\u7801\u5e94\u8be5\u4f7f\u7528\u54ea\u4e2a\u7248\u672c\u7f16\u8bd1\u3002\u5982\u679c\u8be5\u5b57\u6bb5\u4e0d\u5b58\u5728\uff0c\u5176\u9ed8\u8ba4\u4e3a 2015 \u4ee5\u63d0\u4f9b\u540e\u5411\u517c\u5bb9\u6027 edition = \"2018\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html # \u9879\u76ee\u4f9d\u8d56\u7684\u76f8\u5173\u914d\u7f6e [dependencies] \u76f8\u5173\u547d\u4ee4 cargo build \u6784\u5efa\u4e86\u9879\u76ee cargo run \u7f16\u8bd1\u548c\u8fd0\u884c cargo check \u5feb\u901f\u68c0\u67e5\u4ee3\u7801\u786e\u4fdd\u5176\u53ef\u4ee5\u7f16\u8bd1 cargo build --release \u6765\u4f18\u5316\u7f16\u8bd1\u9879\u76ee \u5728\u4f60\u7684 main.rs \u5199\u5165\u4ee3\u7801 1 2 3 4 // \u6211\u611f\u89c9\u4f60\u4e0d\u662f\u5199\uff0c\u6211\u4f30\u8ba1\u4f60\u662f\u590d\u5236\u7c98\u8d34\ud83d\ude1c fn main () { println! ( \"Hello, world!\" ); } \u4f7f\u7528 cargo run \u8dd1\u8d77\u6765\u4f60\u7684\u4ee3\u7801 Hello, world! \u5230\u6b64\u4e3a\u6b62\uff0c\u606d\u559c\u4f60\u5199\u51fa\u6765\u4e86\u7b2c\u4e00\u4e2aRust\u7a0b\u5e8f\uff01\uff01\u725b\u6279\ud83d\ude1c","title":"Hello, World!"},{"location":"docs/introduction/","text":"\u524d \u8a00 \u00b6 \u7531\u4e8e\u4e2a\u4eba\u539f\u56e0\u51b3\u5b9a\u518d\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\uff0c\u90a3\u8fd9\u4e2a\u8bed\u8a00\u5c31\u662f rust \u7684\u4e86\uff0c\u53e6\u5916\u6211\u8fd8\u628a\u6211\u5b66\u4e60\u7b14\u8bb0\u901a\u8fc7 github \u5f00\u6e90\u7684\u65b9\u5f0f\u8fdb\u884c\u6574\u7406\u5f00\u6e90\uff0c\u90a3\u4eca\u5929\u6211\u4eec\u5c31\u4ece rust \u73af\u5883\u642d\u5efa\u5230\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u59cb\u3002 Rust\u4ecb\u7ecd \u00b6 Rust \u662f\u4e00\u95e8\u7cfb\u7edf\u7ea7\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 Rust \u7531 Graydon Hoare \u5f00\u53d1\u5e76\u5728\u88ab Mozilla \u5b9e\u9a8c\u5ba4\u6536\u8d2d\u540e\u53d1\u626c\u5149\u5927\u3002 Rust \u662f\u4e00\u95e8\u7cfb\u7edf\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u88ab\u8bbe\u8ba1\u4e3a\u4fdd\u8bc1\u5185\u5b58\u548c\u7ebf\u7a0b\u5b89\u5168\uff0c\u9632\u6b62\u6bb5\u9519\u8bef\u4ea7\u751f\u3002\u4f5c\u4e3a\u7cfb\u7edf\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u7684\u57fa\u672c\u7406\u5ff5\u662f\u201c\u96f6\u5f00\u9500\u62bd\u8c61\u201d\u3002\u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u5b83\u7684\u901f\u5ea6\u4e0e C/C++ \u540c\u7ea7\u3002Rust \u53ef\u4ee5\u88ab\u5f52\u4e3a\u901a\u7528\u7684\u3001\u591a\u8303\u5f0f\u3001\u7f16\u8bd1\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u7c7b\u4f3c C/C++\u3002\u4e0e\u8fd9\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0cRust \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff01Rust \u7f16\u7a0b\u8bed\u8a00\u7684\u76ee\u6807\u662f\uff0c\u521b\u5efa\u4e00\u4e2a\u5b89\u5168\u548c\u5e76\u53d1\u7684\u8f6f\u4ef6\u7cfb\u7edf\u3002\u5b83\u5f3a\u8c03\u5b89\u5168\u6027\u3001\u5e76\u53d1\u548c\u5185\u5b58\u63a7\u5236\u3002\u5c3d\u7ba1 Rust \u501f\u7528\u4e86 C/C++ \u7684\u8bed\u6cd5\uff0c\u5374\u675c\u7edd\u4e86\u7a7a\u6307\u9488\u548c\u60ac\u6302\u6307\u9488\uff0c\u800c\u8fd9\u4e8c\u8005\u662f C/C++ \u4e2d\u7cfb\u7edf\u5d29\u6e83\u3001\u5185\u5b58\u6cc4\u9732\u548c\u4e0d\u5b89\u5168\u4ee3\u7801\u7684\u6839\u6e90\u3002 \u90a3\u6211\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60 rust \uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u89c9\u5f97\u5b98\u65b9\u7f51\u7ad9\u5c31\u6709\u7b54\u6848\ud83d\ude1c\u3002 \u5bf9\u6bd4\u5176\u4ed6\u8bed\u8a00 \u00b6 \u8fd9\u91cc\u6211\u4eec\u6bd4\u8f83\u7684\u662f\u76f8\u5173\u8bed\u8a00\u5728\u5904\u7406\u4e00\u4e9b\u51fd\u6570\u7684\u901f\u5ea6\uff0c\u6570\u636e\u6765\u6e90 debian \u7684 benchmarksgame \uff0c\u5982\u4e0b\u56fe: \u4e3a\u4ec0\u4e48\u9009\u62e9 Rust ? \u00b6 \u6b63\u5982 Rust \u8bed\u8a00\u81ea\u5df1\u8bf4\u7684\u90a3\u6837\uff0c Rust \u8bed\u8a00\u6709\u4e09\u5927\u613f\u666f\uff1a \u9ad8\u5b89\u5168 \u9ad8\u6027\u80fd \u9ad8\u5e76\u53d1 Rust \u8bed\u8a00\u65e8\u5728\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u5f00\u53d1\u9ad8\u5ea6\u53ef\u9760\u548c\u5feb\u901f\u7684\u8f6f\u4ef6\u3002 Rust \u8bed\u8a00\u652f\u6301\u7528\u73b0\u4ee3\u8bed\u8a00\u7279\u6027\u6765\u5199\u4e00\u4e9b\u7cfb\u7edf\u7ea7\u522b\u4e43\u81f3\u673a\u5668\u7ea7\u522b\u7684\u7a0b\u5e8f\u3002 \u9ad8\u6027\u80fd \u00b6 \u9ad8\u6027\u80fd\u662f\u6240\u6709\u8bed\u8a00\u7684\u6700\u9ad8\u8ffd\u6c42\uff0c Rust \u4e5f\u4e0d\u4f8b\u5916\u3002 \u4e3a\u4e86\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c Rust \u629b\u5f03\u4e86 C/C++ \u4e4b\u5916\u7684\u8bed\u8a00\u90fd\u6709\u7684 \u5783\u573e\u56de\u6536\u5668\uff08 Garbage Collector \uff09\u3002 \u4e5f\u5c31\u662f\u6d88\u9664\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002 \u7f16\u8bd1\u65f6\u5185\u5b58\u5b89\u5168 \u00b6 Rust \u867d\u7136\u4e5f\u6709\u6307\u9488\u7684\u6982\u5ff5\uff0c\u4f46\u8fd9\u4e2a\u6982\u5ff5\u88ab\u5927\u5927\u7684\u5f31\u5316\uff0c\u56e0\u6b64\u5b83\u6ca1\u6709 C/C++ \u90a3\u79cd\u60ac\u7a7a\u6307\u9488\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u5185\u5b58\u6cc4\u6f0f\u7b49\u7b49\u95ee\u9898\u3002 \u5929\u751f\u591a\u7ebf\u7a0b\u5b89\u5168\u8fd0\u884c\u7a0b\u5e8f \u00b6 Rust \u662f\u4e3a\u591a\u7ebf\u7a0b\u9ad8\u5e76\u53d1\u800c\u8bbe\u8ba1\u7684\u7cfb\u7edf\u7ea7\u522b\u8bed\u8a00\uff0c Rust \u7684 \u62e5\u6709\u8005( ownership ) \u6982\u5ff5\u548c \u5185\u5b58\u5b89\u5168 \u89c4\u5219\u4f7f\u5f97\u5b83\u5929\u751f\u652f\u6301\u9ad8\u5e76\u53d1\uff0c\u800c\u4e14\u662f\u652f\u6301\u6ca1\u6709\u6570\u636e\u7ade\u4e89\u7684\u9ad8\u5e76\u53d1\u3002 Rust \u8bed\u8a00\u652f\u6301 Web Assembly (WASM) \u8bed\u8a00 \u00b6 Rust \u7684\u76ee\u6807\u662f\u6210\u4e3a\u9ad8\u5e76\u53d1\u4e14\u9ad8\u5b89\u5168\u7684\u7cfb\u7edf\u7ea7\u8bed\u8a00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4ee3\u8868\u5b83\u5c31\u4e0d\u80fd\u5f00\u53d1 Web \u5e94\u7528\uff0c Rust \u652f\u6301\u901a\u8fc7\u628a\u4ee3\u7801\u7f16\u8bd1\u6210 Web Assembly (WASM) \u8bed\u8a00\u4ece\u800c\u80fd\u591f\u5728\u6d4f\u89c8\u5668\u7aef\u4ee5\u5b9e\u73b0\u5feb\u901f\uff0c\u53ef\u9760\u7684\u8fd0\u884c\u3002 Web Assembly (WASM) \u8bed\u8a00\u662f\u88ab\u8bbe\u8ba1\u7528\u6765\u5728\u6d4f\u89c8\u5668\u7aef/\u5d4c\u5165\u5f0f\u8bbe\u522b\u4e0a\u8fd0\u884c\u7684\uff0c\u7528\u4e8e\u6267\u884c CPU \u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4 Web Assembly (WASM) \u8bed\u8a00 \u7684\u76ee\u6807\u662f\u548c Javascript \u4e00\u6837\u80fd\u591f\u5728\u6d4f\u89c8\u5668\u91cc\u8fd0\u884c\uff0c\u4f46\u56e0\u4e3a\u662f\u7f16\u8bd1\u578b\uff0c\u6240\u4ee5\u66f4\u9ad8\u6548\u3002","title":"Rust \u4ecb\u7ecd"},{"location":"docs/introduction/#_1","text":"\u7531\u4e8e\u4e2a\u4eba\u539f\u56e0\u51b3\u5b9a\u518d\u5b66\u4e60\u4e00\u95e8\u8bed\u8a00\uff0c\u90a3\u8fd9\u4e2a\u8bed\u8a00\u5c31\u662f rust \u7684\u4e86\uff0c\u53e6\u5916\u6211\u8fd8\u628a\u6211\u5b66\u4e60\u7b14\u8bb0\u901a\u8fc7 github \u5f00\u6e90\u7684\u65b9\u5f0f\u8fdb\u884c\u6574\u7406\u5f00\u6e90\uff0c\u90a3\u4eca\u5929\u6211\u4eec\u5c31\u4ece rust \u73af\u5883\u642d\u5efa\u5230\u7b2c\u4e00\u4e2a\u7a0b\u5e8f\u5f00\u59cb\u3002","title":"\u524d \u8a00"},{"location":"docs/introduction/#rust","text":"Rust \u662f\u4e00\u95e8\u7cfb\u7edf\u7ea7\u522b\u7684\u7f16\u7a0b\u8bed\u8a00\u3002 Rust \u7531 Graydon Hoare \u5f00\u53d1\u5e76\u5728\u88ab Mozilla \u5b9e\u9a8c\u5ba4\u6536\u8d2d\u540e\u53d1\u626c\u5149\u5927\u3002 Rust \u662f\u4e00\u95e8\u7cfb\u7edf\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u88ab\u8bbe\u8ba1\u4e3a\u4fdd\u8bc1\u5185\u5b58\u548c\u7ebf\u7a0b\u5b89\u5168\uff0c\u9632\u6b62\u6bb5\u9519\u8bef\u4ea7\u751f\u3002\u4f5c\u4e3a\u7cfb\u7edf\u7ea7\u7f16\u7a0b\u8bed\u8a00\uff0c\u5b83\u7684\u57fa\u672c\u7406\u5ff5\u662f\u201c\u96f6\u5f00\u9500\u62bd\u8c61\u201d\u3002\u7406\u8bba\u4e0a\u6765\u8bf4\uff0c\u5b83\u7684\u901f\u5ea6\u4e0e C/C++ \u540c\u7ea7\u3002Rust \u53ef\u4ee5\u88ab\u5f52\u4e3a\u901a\u7528\u7684\u3001\u591a\u8303\u5f0f\u3001\u7f16\u8bd1\u578b\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u7c7b\u4f3c C/C++\u3002\u4e0e\u8fd9\u4e24\u95e8\u7f16\u7a0b\u8bed\u8a00\u4e0d\u540c\u7684\u662f\uff0cRust \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff01Rust \u7f16\u7a0b\u8bed\u8a00\u7684\u76ee\u6807\u662f\uff0c\u521b\u5efa\u4e00\u4e2a\u5b89\u5168\u548c\u5e76\u53d1\u7684\u8f6f\u4ef6\u7cfb\u7edf\u3002\u5b83\u5f3a\u8c03\u5b89\u5168\u6027\u3001\u5e76\u53d1\u548c\u5185\u5b58\u63a7\u5236\u3002\u5c3d\u7ba1 Rust \u501f\u7528\u4e86 C/C++ \u7684\u8bed\u6cd5\uff0c\u5374\u675c\u7edd\u4e86\u7a7a\u6307\u9488\u548c\u60ac\u6302\u6307\u9488\uff0c\u800c\u8fd9\u4e8c\u8005\u662f C/C++ \u4e2d\u7cfb\u7edf\u5d29\u6e83\u3001\u5185\u5b58\u6cc4\u9732\u548c\u4e0d\u5b89\u5168\u4ee3\u7801\u7684\u6839\u6e90\u3002 \u90a3\u6211\u4e3a\u4ec0\u4e48\u8981\u5b66\u4e60 rust \uff0c\u8fd9\u4e2a\u95ee\u9898\u6211\u89c9\u5f97\u5b98\u65b9\u7f51\u7ad9\u5c31\u6709\u7b54\u6848\ud83d\ude1c\u3002","title":"Rust\u4ecb\u7ecd"},{"location":"docs/introduction/#_2","text":"\u8fd9\u91cc\u6211\u4eec\u6bd4\u8f83\u7684\u662f\u76f8\u5173\u8bed\u8a00\u5728\u5904\u7406\u4e00\u4e9b\u51fd\u6570\u7684\u901f\u5ea6\uff0c\u6570\u636e\u6765\u6e90 debian \u7684 benchmarksgame \uff0c\u5982\u4e0b\u56fe:","title":"\u5bf9\u6bd4\u5176\u4ed6\u8bed\u8a00"},{"location":"docs/introduction/#rust_1","text":"\u6b63\u5982 Rust \u8bed\u8a00\u81ea\u5df1\u8bf4\u7684\u90a3\u6837\uff0c Rust \u8bed\u8a00\u6709\u4e09\u5927\u613f\u666f\uff1a \u9ad8\u5b89\u5168 \u9ad8\u6027\u80fd \u9ad8\u5e76\u53d1 Rust \u8bed\u8a00\u65e8\u5728\u4ee5\u7b80\u5355\u7684\u65b9\u5f0f\u5f00\u53d1\u9ad8\u5ea6\u53ef\u9760\u548c\u5feb\u901f\u7684\u8f6f\u4ef6\u3002 Rust \u8bed\u8a00\u652f\u6301\u7528\u73b0\u4ee3\u8bed\u8a00\u7279\u6027\u6765\u5199\u4e00\u4e9b\u7cfb\u7edf\u7ea7\u522b\u4e43\u81f3\u673a\u5668\u7ea7\u522b\u7684\u7a0b\u5e8f\u3002","title":"\u4e3a\u4ec0\u4e48\u9009\u62e9 Rust ?"},{"location":"docs/introduction/#_3","text":"\u9ad8\u6027\u80fd\u662f\u6240\u6709\u8bed\u8a00\u7684\u6700\u9ad8\u8ffd\u6c42\uff0c Rust \u4e5f\u4e0d\u4f8b\u5916\u3002 \u4e3a\u4e86\u8ffd\u6c42\u6781\u81f4\u7684\u6027\u80fd\uff0c Rust \u629b\u5f03\u4e86 C/C++ \u4e4b\u5916\u7684\u8bed\u8a00\u90fd\u6709\u7684 \u5783\u573e\u56de\u6536\u5668\uff08 Garbage Collector \uff09\u3002 \u4e5f\u5c31\u662f\u6d88\u9664\u4e86\u5783\u573e\u56de\u6536\u673a\u5236\u5e26\u6765\u7684\u6027\u80fd\u635f\u8017\u3002","title":"\u9ad8\u6027\u80fd"},{"location":"docs/introduction/#_4","text":"Rust \u867d\u7136\u4e5f\u6709\u6307\u9488\u7684\u6982\u5ff5\uff0c\u4f46\u8fd9\u4e2a\u6982\u5ff5\u88ab\u5927\u5927\u7684\u5f31\u5316\uff0c\u56e0\u6b64\u5b83\u6ca1\u6709 C/C++ \u90a3\u79cd\u60ac\u7a7a\u6307\u9488\uff0c\u7f13\u51b2\u533a\u6ea2\u51fa\u548c\u5185\u5b58\u6cc4\u6f0f\u7b49\u7b49\u95ee\u9898\u3002","title":"\u7f16\u8bd1\u65f6\u5185\u5b58\u5b89\u5168"},{"location":"docs/introduction/#_5","text":"Rust \u662f\u4e3a\u591a\u7ebf\u7a0b\u9ad8\u5e76\u53d1\u800c\u8bbe\u8ba1\u7684\u7cfb\u7edf\u7ea7\u522b\u8bed\u8a00\uff0c Rust \u7684 \u62e5\u6709\u8005( ownership ) \u6982\u5ff5\u548c \u5185\u5b58\u5b89\u5168 \u89c4\u5219\u4f7f\u5f97\u5b83\u5929\u751f\u652f\u6301\u9ad8\u5e76\u53d1\uff0c\u800c\u4e14\u662f\u652f\u6301\u6ca1\u6709\u6570\u636e\u7ade\u4e89\u7684\u9ad8\u5e76\u53d1\u3002","title":"\u5929\u751f\u591a\u7ebf\u7a0b\u5b89\u5168\u8fd0\u884c\u7a0b\u5e8f"},{"location":"docs/introduction/#rust-web-assembly-wasm","text":"Rust \u7684\u76ee\u6807\u662f\u6210\u4e3a\u9ad8\u5e76\u53d1\u4e14\u9ad8\u5b89\u5168\u7684\u7cfb\u7edf\u7ea7\u8bed\u8a00\uff0c\u4f46\u8fd9\u5e76\u4e0d\u4ee3\u8868\u5b83\u5c31\u4e0d\u80fd\u5f00\u53d1 Web \u5e94\u7528\uff0c Rust \u652f\u6301\u901a\u8fc7\u628a\u4ee3\u7801\u7f16\u8bd1\u6210 Web Assembly (WASM) \u8bed\u8a00\u4ece\u800c\u80fd\u591f\u5728\u6d4f\u89c8\u5668\u7aef\u4ee5\u5b9e\u73b0\u5feb\u901f\uff0c\u53ef\u9760\u7684\u8fd0\u884c\u3002 Web Assembly (WASM) \u8bed\u8a00\u662f\u88ab\u8bbe\u8ba1\u7528\u6765\u5728\u6d4f\u89c8\u5668\u7aef/\u5d4c\u5165\u5f0f\u8bbe\u522b\u4e0a\u8fd0\u884c\u7684\uff0c\u7528\u4e8e\u6267\u884c CPU \u8ba1\u7b97\u5bc6\u96c6\u578b\u7684\u8bed\u8a00\uff0c\u4e5f\u5c31\u662f\u8bf4 Web Assembly (WASM) \u8bed\u8a00 \u7684\u76ee\u6807\u662f\u548c Javascript \u4e00\u6837\u80fd\u591f\u5728\u6d4f\u89c8\u5668\u91cc\u8fd0\u884c\uff0c\u4f46\u56e0\u4e3a\u662f\u7f16\u8bd1\u578b\uff0c\u6240\u4ee5\u66f4\u9ad8\u6548\u3002","title":"Rust \u8bed\u8a00\u652f\u6301 Web Assembly (WASM) \u8bed\u8a00"},{"location":"docs/loop_for/","text":"\u6982\u5ff5 \u00b6 \u5faa\u73af\u8bed\u53e5 \u4e00\u822c\u662f\u53ea\u5728\u7a0b\u5e8f\u91cd\u590d\u6267\u884c\u67d0\u5757\u4ee3\u7801\u903b\u8f91\u7684\u8bcd\u8bed\uff0c \u5faa\u73af \u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u91cd\u590d\uff0c\u5728 \u6ee1\u8db3\u6307\u5b9a\u7684\u6761\u4ef6 \u4e0b\uff0c \u91cd\u590d\u7684\u505a\u67d0\u4e9b\u4e8b\u60c5 \u3002\u5c31\u597d\u6bd4\u5982\u53ea\u8981\u65f6\u95f4\u6ca1\u5230 18:30\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u76f4\u5728\u91cd\u590d\u7684\u4e0a\u73ed\u3002 Rust \u5faa\u73af\u8bed\u53e5\u6709\u4e09\u79cd\uff1a loop \u8bed\u53e5\u3002\u4e00\u79cd\u91cd\u590d\u6267\u884c\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u7ed3\u675f\u7684\u5faa\u73af\u3002 while \u8bed\u53e5\u3002\u4e00\u79cd\u5728\u67d0\u4e9b\u6761\u4ef6\u4e3a\u771f\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6c38\u8fdc\u6267\u884c\u4e0b\u53bb\u7684\u5faa\u73af\u3002 for \u8bed\u53e5\u3002\u4e00\u79cd\u6709\u786e\u5b9a\u6b21\u6570\u7684\u5faa\u73af\u3002 \u80fd\u786e\u5b9a\u6b21\u6570\u7684\u5faa\u73af\uff0c\u6bd4\u5982 for \u5faa\u73af\u3002 \u6ee1\u8db3\u6761\u4ef6\u5c31\u662f\u6c38\u52a8\u673a\u7684\u5faa\u73af\uff0c\u6bd4\u5982 while \u5faa\u73af\u3002 \u6b7b\u5faa\u73af\uff0c\u6bd4\u5982 loop \u5faa\u73af\u3002 for \u5faa\u73af\u8bed\u53e5 \u00b6 for \u8bed\u53e5\u7528\u4e8e\u6267\u884c\u4ee3\u7801\u5757\u6307\u5b9a\u7684\u6b21\u6570\uff0c\u53ef\u80fd\u548c\u5176\u5b83\u8bed\u8a00\u6709\u6240\u4e0d\u540c\uff0c Rust \u4e2d\u7684 for \u5faa\u73af\u53ea\u6709 for..in \u8fd9\u79cd\u683c\u5f0f\uff0c\u5e38\u7528\u4e8e\u8fed\u4ee3\u4e00\u7ec4\u56fa\u5b9a\u7684\u503c\uff0c\u4f8b\u5982 \u6570\u7ec4\u3001\u5411\u91cf \u7b49\u3002 1 2 3 4 5 6 7 8 fn main () { let mut sum : u16 = 0 ; for i in 1 .. 100 { sum += i ; } println! ( \"sum = {}\" , sum ) } // sum = 4950 while \u5faa\u73af\u8bed\u53e5 \u00b6 while \u5faa\u73af\u4f1a\u5728\u6bcf\u6b21\u91cd\u590d\u6267\u884c\u524d\u5148\u5224\u65ad\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u6ee1\u8db3\u5219\u6267\u884c\uff0c\u4e0d\u6ee1\u8db3\u5219\u9000\u51fa\u3002 1 2 3 4 5 sum = 0 ; while sum < 100 { sum += 1 ; } println! ( \"sum = {}\" , sum ); //100 loop \u5faa\u73af\u8bed\u53e5 \u00b6 loop \u8bed\u53e5\u4ee3\u8868\u7740\u4e00\u79cd\u6b7b\u5faa\u73af\u3002\u5b83\u6ca1\u6709\u5faa\u73af\u6761\u4ef6\uff0c\u4e5f\u6ca1\u6709\u5faa\u73af\u6b21\u6570\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u6c38\u52a8\u673a\u3002 1 2 3 loop { // action \u8981\u91cd\u590d\u6267\u884c\u7684\u4ee3\u7801 } \u771f\u6b63\u610f\u4e49\u4e0a\u7684\u6b7b\u5faa\u73af\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u6f14\u793a\uff01 break \u5faa\u73af\u63a7\u5236\u8bed\u53e5 \u00b6 break \u8bed\u53e5\u7684\u51fa\u73b0\uff0c\u5c31\u662f\u4e3a\u4e86\u5728 action \u8bed\u53e5\u5757\u4e2d\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\u8bed\u53e5\u3002 1 2 3 4 5 6 7 8 9 let mut n = 0 ; loop { if n == 100 { // stop action break ; } n += 1 ; } println! ( \"n = {}\" , n ); // 100 continue \u5faa\u73af\u63a7\u5236\u8bed\u53e5 \u00b6 continue \u8bed\u53e5\uff0c\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u505c\u6b62\u6267\u884c\u5269\u4e0b\u7684\u8bed\u53e5\uff0c\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 100\u4ee5\u5185\u5076\u6570 n = 0 ; loop { n += 1 ; if n == 100 { // stop action break ; } if n % 2 == 0 { // stop action println! ( \"\u5076\u6570 {}\" , n ); continue ; } }","title":"Rust \u5faa\u73af\u8bed\u53e5"},{"location":"docs/loop_for/#_1","text":"\u5faa\u73af\u8bed\u53e5 \u4e00\u822c\u662f\u53ea\u5728\u7a0b\u5e8f\u91cd\u590d\u6267\u884c\u67d0\u5757\u4ee3\u7801\u903b\u8f91\u7684\u8bcd\u8bed\uff0c \u5faa\u73af \u5176\u5b9e\u5c31\u662f\u4e00\u79cd\u91cd\u590d\uff0c\u5728 \u6ee1\u8db3\u6307\u5b9a\u7684\u6761\u4ef6 \u4e0b\uff0c \u91cd\u590d\u7684\u505a\u67d0\u4e9b\u4e8b\u60c5 \u3002\u5c31\u597d\u6bd4\u5982\u53ea\u8981\u65f6\u95f4\u6ca1\u5230 18:30\uff0c\u90a3\u4e48\u6211\u4eec\u4e00\u76f4\u5728\u91cd\u590d\u7684\u4e0a\u73ed\u3002 Rust \u5faa\u73af\u8bed\u53e5\u6709\u4e09\u79cd\uff1a loop \u8bed\u53e5\u3002\u4e00\u79cd\u91cd\u590d\u6267\u884c\u4e14\u6c38\u8fdc\u4e0d\u4f1a\u7ed3\u675f\u7684\u5faa\u73af\u3002 while \u8bed\u53e5\u3002\u4e00\u79cd\u5728\u67d0\u4e9b\u6761\u4ef6\u4e3a\u771f\u7684\u60c5\u51b5\u4e0b\u5c31\u4f1a\u6c38\u8fdc\u6267\u884c\u4e0b\u53bb\u7684\u5faa\u73af\u3002 for \u8bed\u53e5\u3002\u4e00\u79cd\u6709\u786e\u5b9a\u6b21\u6570\u7684\u5faa\u73af\u3002 \u80fd\u786e\u5b9a\u6b21\u6570\u7684\u5faa\u73af\uff0c\u6bd4\u5982 for \u5faa\u73af\u3002 \u6ee1\u8db3\u6761\u4ef6\u5c31\u662f\u6c38\u52a8\u673a\u7684\u5faa\u73af\uff0c\u6bd4\u5982 while \u5faa\u73af\u3002 \u6b7b\u5faa\u73af\uff0c\u6bd4\u5982 loop \u5faa\u73af\u3002","title":"\u6982\u5ff5"},{"location":"docs/loop_for/#for","text":"for \u8bed\u53e5\u7528\u4e8e\u6267\u884c\u4ee3\u7801\u5757\u6307\u5b9a\u7684\u6b21\u6570\uff0c\u53ef\u80fd\u548c\u5176\u5b83\u8bed\u8a00\u6709\u6240\u4e0d\u540c\uff0c Rust \u4e2d\u7684 for \u5faa\u73af\u53ea\u6709 for..in \u8fd9\u79cd\u683c\u5f0f\uff0c\u5e38\u7528\u4e8e\u8fed\u4ee3\u4e00\u7ec4\u56fa\u5b9a\u7684\u503c\uff0c\u4f8b\u5982 \u6570\u7ec4\u3001\u5411\u91cf \u7b49\u3002 1 2 3 4 5 6 7 8 fn main () { let mut sum : u16 = 0 ; for i in 1 .. 100 { sum += i ; } println! ( \"sum = {}\" , sum ) } // sum = 4950","title":"for \u5faa\u73af\u8bed\u53e5"},{"location":"docs/loop_for/#while","text":"while \u5faa\u73af\u4f1a\u5728\u6bcf\u6b21\u91cd\u590d\u6267\u884c\u524d\u5148\u5224\u65ad\u6761\u4ef6\u662f\u5426\u6ee1\u8db3\uff0c\u6ee1\u8db3\u5219\u6267\u884c\uff0c\u4e0d\u6ee1\u8db3\u5219\u9000\u51fa\u3002 1 2 3 4 5 sum = 0 ; while sum < 100 { sum += 1 ; } println! ( \"sum = {}\" , sum ); //100","title":"while \u5faa\u73af\u8bed\u53e5"},{"location":"docs/loop_for/#loop","text":"loop \u8bed\u53e5\u4ee3\u8868\u7740\u4e00\u79cd\u6b7b\u5faa\u73af\u3002\u5b83\u6ca1\u6709\u5faa\u73af\u6761\u4ef6\uff0c\u4e5f\u6ca1\u6709\u5faa\u73af\u6b21\u6570\uff0c\u5b83\u5c31\u662f\u4e00\u4e2a\u6c38\u52a8\u673a\u3002 1 2 3 loop { // action \u8981\u91cd\u590d\u6267\u884c\u7684\u4ee3\u7801 } \u771f\u6b63\u610f\u4e49\u4e0a\u7684\u6b7b\u5faa\u73af\uff0c\u8fd9\u91cc\u5c31\u4e0d\u505a\u6f14\u793a\uff01","title":"loop \u5faa\u73af\u8bed\u53e5"},{"location":"docs/loop_for/#break","text":"break \u8bed\u53e5\u7684\u51fa\u73b0\uff0c\u5c31\u662f\u4e3a\u4e86\u5728 action \u8bed\u53e5\u5757\u4e2d\u53ef\u4ee5\u9000\u51fa\u5faa\u73af\u8bed\u53e5\u3002 1 2 3 4 5 6 7 8 9 let mut n = 0 ; loop { if n == 100 { // stop action break ; } n += 1 ; } println! ( \"n = {}\" , n ); // 100","title":"break \u5faa\u73af\u63a7\u5236\u8bed\u53e5"},{"location":"docs/loop_for/#continue","text":"continue \u8bed\u53e5\uff0c\u7b80\u5355\u7684\u8bf4\uff0c\u5c31\u662f\u505c\u6b62\u6267\u884c\u5269\u4e0b\u7684\u8bed\u53e5\uff0c\u76f4\u63a5\u8fdb\u5165\u4e0b\u4e00\u4e2a\u5faa\u73af\u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // 100\u4ee5\u5185\u5076\u6570 n = 0 ; loop { n += 1 ; if n == 100 { // stop action break ; } if n % 2 == 0 { // stop action println! ( \"\u5076\u6570 {}\" , n ); continue ; } }","title":"continue \u5faa\u73af\u63a7\u5236\u8bed\u53e5"},{"location":"docs/operator/","text":"\u6982 \u8ff0 \u00b6 \u8fd0\u7b97\u7b26 \u662f\u7528\u4e8e\u5bf9\u6570\u636e\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u88ab \u8fd0\u7b97\u7b26 \u6267\u884c\u7684\u6570\u636e\u79f0\u4e3a \u64cd\u4f5c\u6570 \u3002 \u4f8b\u5982\u6211\u4eec\u5e38\u89c1\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u90a3\u4e48 \u52a0\u53f7 \uff08 + \uff09 \u5c31\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982\uff1a 1 2 3 4 fn main () { let result = 11 + 11 ; println! ( \"11 + 11 = {}\" , result ) } \u4e0a\u9762\u7684 11 + 11 \u7684\u8fd0\u7b97\u7b26\u5c31\u662f + \uff0c result \u5c31\u662f\u8fd0\u7b97\u7ed3\u679c\u3002 Rust \u8bed\u8a00\u652f\u6301\u4ee5\u4e0b\u56db\u79cd\u8fd0\u7b97\u7b26 \u00b6 \u7b97\u672f\u8fd0\u7b97\u7b26 \u4f4d\u8fd0\u7b97\u7b26 \u5173\u7cfb\u8fd0\u7b97\u7b26 \u903b\u8f91\u8fd0\u7b97\u7b26 Rust \u8bed\u8a00\u4e0d\u652f\u6301\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26 ++ \u548c -- \u52a0\u51cf\u4e58\u9664\u6c42\u4f59 \u4e94\u5219\u8fd0\u7b97\uff1a 1 2 3 4 5 6 7 8 9 fn main () { // \u52a0\u51cf\u4e58\u9664 let result = 11 + 11 ; println! ( \"11 + 11 = {}\" , result ); println! ( \"11 - 11 = {}\" , 11 - 11 ); println! ( \"11 * 11 = {}\" , 11 * 11 ); println! ( \"11 / 11 = {}\" , 11 / 11 ); println! ( \"11 % 11 = {}\" , 11 % 11 ); } \u5173\u7cfb\u8fd0\u7b97 \u00b6 \u5173\u7cfb\u8fd0\u7b97\u7b26\u6d4b\u8bd5\u6216\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u662f\u5927\u4e8e\uff0c\u662f\u7b49\u4e8e\u8fd8\u662f\u5c0f\u4e8e\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a \u5e03\u5c14\u7c7b\u578b \u3002 1 2 3 4 5 6 7 // \u5173\u7cfb\u8fd0\u7b97 println! ( \"1 > 0 {}\" , 1 > 0 ); println! ( \"0 < 1 {}\" , 0 < 1 ); println! ( \"21 >= 21 {}\" , 21 >= 21 ); println! ( \"21 <= 21 {}\" , 21 <= 21 ); println! ( \"0 == 0 {}\" , 0 == 0 ); println! ( \"0 != 0 {}\" , 0 != 0 ); \u903b\u8f91\u8fd0\u7b97\u7b26 \u00b6 \u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u7ec4\u5408\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u6761\u4ef6\uff0c\u903b\u8f91\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u7ed3\u679c\u4e5f\u662f \u5e03\u5c14\u7c7b\u578b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // \u903b\u8f91\u4e0e \u903b\u8f91\u6216 \u903b\u8f91\u975e (\u53d6\u53cd) println! ( \"1 == 1 && 0 != 1 {}\" , 1 == 1 && 0 != 1 ); println! ( \"1 == 1 || 0 != 1 {}\" , 1 == 1 || 0 != 1 ); println! ( \"!(1 == 1) {}\" , ! ( 1 == 1 )); let a = 20 ; let b = 30 ; if ( a > 10 ) && ( b > 10 ) { println! ( \"true\" ); } let c = 0 ; let d = 30 ; if ( c > 10 ) || ( d > 10 ) { println! ( \"true\" ); } let is_elder = false ; if ! is_elder { println! ( \"Not Elder\" ); } output\uff1a 1 2 3 4 5 6 1 == 1 && 0 != 1 true 1 == 1 || 0 != 1 true ! ( 1 == 1 ) false true true Not Elder \u4f4d\u8fd0\u7b97\u7b26 \u00b6 \u5bf9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c \u4f4d\u8fd0\u7b97 \u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // \u4f4d\u8fd0\u7b97\u7b26 let a : i32 = 2 ; // \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 0 0 0 0 0 0 1 0 let b : i32 = 3 ; // \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 0 0 0 0 0 0 1 1 let mut result : i32 ; result = a & b ; println! ( \"(a & b) => {} \" , result ); // 0 0 0 0 0 0 1 0 = 2 result = a | b ; println! ( \"(a | b) => {} \" , result ); // 0 0 0 0 0 0 1 1 = 3 result = a ^ b ; println! ( \"(a ^ b) => {} \" , result ); result = ! b ; println! ( \"(!b) => {} \" , result ); result = a << b ; println! ( \"(a << b) => {}\" , result ); result = a >> b ; println! ( \"(a >> b) => {}\" , result ); output\uff1a 1 2 3 4 5 6 ( a & b ) => 2 ( a | b ) => 3 ( a ^ b ) => 1 ( ! b ) => - 4 ( a << b ) => 16 ( a >> b ) => 0","title":"Rust \u8fd0\u7b97\u7b26"},{"location":"docs/operator/#_1","text":"\u8fd0\u7b97\u7b26 \u662f\u7528\u4e8e\u5bf9\u6570\u636e\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\uff0c\u88ab \u8fd0\u7b97\u7b26 \u6267\u884c\u7684\u6570\u636e\u79f0\u4e3a \u64cd\u4f5c\u6570 \u3002 \u4f8b\u5982\u6211\u4eec\u5e38\u89c1\u7684\u52a0\u6cd5\u8fd0\u7b97\uff0c\u90a3\u4e48 \u52a0\u53f7 \uff08 + \uff09 \u5c31\u662f\u4e00\u4e2a\u8fd0\u7b97\u7b26\uff0c\u4f8b\u5982\uff1a 1 2 3 4 fn main () { let result = 11 + 11 ; println! ( \"11 + 11 = {}\" , result ) } \u4e0a\u9762\u7684 11 + 11 \u7684\u8fd0\u7b97\u7b26\u5c31\u662f + \uff0c result \u5c31\u662f\u8fd0\u7b97\u7ed3\u679c\u3002","title":"\u6982 \u8ff0"},{"location":"docs/operator/#rust","text":"\u7b97\u672f\u8fd0\u7b97\u7b26 \u4f4d\u8fd0\u7b97\u7b26 \u5173\u7cfb\u8fd0\u7b97\u7b26 \u903b\u8f91\u8fd0\u7b97\u7b26 Rust \u8bed\u8a00\u4e0d\u652f\u6301\u81ea\u589e\u81ea\u51cf\u8fd0\u7b97\u7b26 ++ \u548c -- \u52a0\u51cf\u4e58\u9664\u6c42\u4f59 \u4e94\u5219\u8fd0\u7b97\uff1a 1 2 3 4 5 6 7 8 9 fn main () { // \u52a0\u51cf\u4e58\u9664 let result = 11 + 11 ; println! ( \"11 + 11 = {}\" , result ); println! ( \"11 - 11 = {}\" , 11 - 11 ); println! ( \"11 * 11 = {}\" , 11 * 11 ); println! ( \"11 / 11 = {}\" , 11 / 11 ); println! ( \"11 % 11 = {}\" , 11 % 11 ); }","title":"Rust \u8bed\u8a00\u652f\u6301\u4ee5\u4e0b\u56db\u79cd\u8fd0\u7b97\u7b26"},{"location":"docs/operator/#_2","text":"\u5173\u7cfb\u8fd0\u7b97\u7b26\u6d4b\u8bd5\u6216\u5b9a\u4e49\u4e24\u4e2a\u5b9e\u4f53\u4e4b\u95f4\u7684\u5173\u7cfb\u7c7b\u578b\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7528\u4e8e\u6bd4\u8f83\u4e24\u4e2a\u6216\u591a\u4e2a\u503c\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u662f\u5927\u4e8e\uff0c\u662f\u7b49\u4e8e\u8fd8\u662f\u5c0f\u4e8e\uff0c\u5173\u7cfb\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u7ed3\u679c\u4e3a \u5e03\u5c14\u7c7b\u578b \u3002 1 2 3 4 5 6 7 // \u5173\u7cfb\u8fd0\u7b97 println! ( \"1 > 0 {}\" , 1 > 0 ); println! ( \"0 < 1 {}\" , 0 < 1 ); println! ( \"21 >= 21 {}\" , 21 >= 21 ); println! ( \"21 <= 21 {}\" , 21 <= 21 ); println! ( \"0 == 0 {}\" , 0 == 0 ); println! ( \"0 != 0 {}\" , 0 != 0 );","title":"\u5173\u7cfb\u8fd0\u7b97"},{"location":"docs/operator/#_3","text":"\u903b\u8f91\u8fd0\u7b97\u7b26\uff0c\u7528\u4e8e\u7ec4\u5408\u4e24\u4e2a\u6216\u8005\u591a\u4e2a\u6761\u4ef6\uff0c\u903b\u8f91\u8fd0\u7b97\u7b26\u7684\u8fd4\u56de\u7ed3\u679c\u4e5f\u662f \u5e03\u5c14\u7c7b\u578b \u3002 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 // \u903b\u8f91\u4e0e \u903b\u8f91\u6216 \u903b\u8f91\u975e (\u53d6\u53cd) println! ( \"1 == 1 && 0 != 1 {}\" , 1 == 1 && 0 != 1 ); println! ( \"1 == 1 || 0 != 1 {}\" , 1 == 1 || 0 != 1 ); println! ( \"!(1 == 1) {}\" , ! ( 1 == 1 )); let a = 20 ; let b = 30 ; if ( a > 10 ) && ( b > 10 ) { println! ( \"true\" ); } let c = 0 ; let d = 30 ; if ( c > 10 ) || ( d > 10 ) { println! ( \"true\" ); } let is_elder = false ; if ! is_elder { println! ( \"Not Elder\" ); } output\uff1a 1 2 3 4 5 6 1 == 1 && 0 != 1 true 1 == 1 || 0 != 1 true ! ( 1 == 1 ) false true true Not Elder","title":"\u903b\u8f91\u8fd0\u7b97\u7b26"},{"location":"docs/operator/#_4","text":"\u5bf9\u6570\u636e\u7684\u4e8c\u8fdb\u5236\u4f4d\u8fdb\u884c \u4f4d\u8fd0\u7b97 \u4f8b\u5982\u4e0b\u9762\u7684\u4f8b\u5b50\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 // \u4f4d\u8fd0\u7b97\u7b26 let a : i32 = 2 ; // \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 0 0 0 0 0 0 1 0 let b : i32 = 3 ; // \u4e8c\u8fdb\u5236\u8868\u793a\u4e3a 0 0 0 0 0 0 1 1 let mut result : i32 ; result = a & b ; println! ( \"(a & b) => {} \" , result ); // 0 0 0 0 0 0 1 0 = 2 result = a | b ; println! ( \"(a | b) => {} \" , result ); // 0 0 0 0 0 0 1 1 = 3 result = a ^ b ; println! ( \"(a ^ b) => {} \" , result ); result = ! b ; println! ( \"(!b) => {} \" , result ); result = a << b ; println! ( \"(a << b) => {}\" , result ); result = a >> b ; println! ( \"(a >> b) => {}\" , result ); output\uff1a 1 2 3 4 5 6 ( a & b ) => 2 ( a | b ) => 3 ( a ^ b ) => 1 ( ! b ) => - 4 ( a << b ) => 16 ( a >> b ) => 0","title":"\u4f4d\u8fd0\u7b97\u7b26"},{"location":"docs/scalar_type/","text":"\u6982 \u8ff0 \u00b6 Rust \u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u6240\u4ee5 \u7c7b\u578b\u7cfb\u7edf \u4e5f\u662f\u8fd9\u95e8\u8bed\u8a00\u7684\u91cd\u4e2d\u4e4b\u91cd\uff0c\u5b83\u4f53\u73b0\u4e86\u8bed\u8a00\u6240\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6211\u4eec\u8bf4 \u7c7b\u578b\u7cfb\u7edf \u5b58\u5728\u7684\u76ee\u7684\uff0c\u5c31\u662f \u7a0b\u5e8f\u5728\u5b58\u50a8\u6216\u64cd\u4f5c\u67d0\u4e2a\u6570\u4e4b\u524d\u68c0\u67e5\u8fd9\u4e2a\u6570\u7684\u6709\u6548\u6027 \u3002 Scalar Type \u00b6 Rust \u8bed\u8a00\u4e2d\u6709\u56db\u79cd\u6807\u91cf\u6570\u636e\u7c7b\u578b\uff1a \u6574\u578b \u6d6e\u70b9\u578b \u5e03\u5c14\u7c7b\u578b \u5b57\u7b26\u7c7b\u578b \u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u5bf9\u6bcf\u79cd\u6807\u91cf\u6570\u636e\u7c7b\u578b\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u4ecb\u7ecd\u3002 \u6574 \u578b \u00b6 \u6574\u578b\u80fd\u591f\u56ca\u62ec\u6240\u6709\u7684\u6570\u5b57\uff0c\u867d\u7136\u4e0d\u53ef\u80fd\u65e0\u7a77\u5927\uff0c\u4f46\u5df2\u7ecf\u5927\u5230\u8db3\u591f\u4f7f\u7528\u4e86\u3002 \u6700\u5927\u7684\u6574\u578b\u4e3a 340282366920938463463374607431768211455 \uff0c\u7531 std::u128:MAX \u5b9a\u4e49\u3002 \u6700\u5c0f\u7684\u6574\u578b\u4e3a -170141183460469231731687303715884105728 \uff0c\u7531 std::i128:MIN \u5b9a\u4e49\u3002 \u6574\u6570\u7c7b\u578b\u5728 Rust \u4e2d\u53c8\u5206\u4e3a: signed \u548c unsigned \u3002 \u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5b58\u50a8\u8d1f\u6570\uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u53ea\u80fd\u5b58\u50a8\u6574\u6570\u4e0d\u80fd\u5b58\u50a8\u8d1f\u6570\u3002 \u7c7b\u578b\u5217\u8868\ud83d\udc47 \u5f53\u524d\u53ea\u5217\u51fa\u6574\u6570\u7c7b\u578b\uff0c\u5176\u4ed6\u7c7b\u578b\u81ea\u884c\u67e5\u8be2\u8d44\u6599\u3002 size signed unsigned 8bit i8 u8 16bit i16 u16 32bit i32 u32 64bit i64 u64 128bit i128 u128 Arch isize usize arch \u662f\u7531 CPU \u6784\u67b6\u51b3\u5b9a\u7684\u5927\u5c0f\u7684\u6574\u578b\u7c7b\u578b\uff0c\u5927\u5c0f\u4e3a arch \u7684\u6574\u6570\u5728 x86 \u673a\u5668\u4e0a\u4e3a 32 \u4f4d\uff0c\u5728 x64 \u673a\u5668\u4e0a\u4e3a 64 \u4f4d\u3002 \u6bcf\u79cd\u6574\u578b\u5e76\u4e0d\u90fd\u662f\u80fd\u5b58\u50a8\u4efb\u610f\u6570\u5b57\u7684\uff0c\u6bcf\u79cd\u6574\u578b\u53ea\u80fd\u88c5\u4e0b\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u5b57\uff0c\u5982\u679c\u7ed9\u4e88\u7684\u6570\u5b57\u8d85\u51fa\u4e86\u6574\u578b\u7684\u8303\u56f4\u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u76f8\u4fe1\u4f60\u5982\u679c\u4e4b\u524d\u5199\u8fc7 Java \u4e5f\u6709\u4f53\u4f1a\u3002 \u4ee3\u7801\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 fn main (){ // \u6574\u578b let i = 00_32 ; // default scalar type i32 let age : u8 = 0x16 ; let num : i64 = - 64 ; let iarch : isize = i ; let uarch : usize = 64 ; println! ( \"i = {} age = {} num = {}\" , i , age , num ); println! ( \"iarch = {} uarch = {}\" , iarch , uarch ); } \u6574\u6570\u652f\u6301\u6574\u6570\u4e2d\u95f4\u5b58\u5728\u4e00\u4e2a\u4e0b\u5212\u7ebf\u548c\u5341\u516d\u8fdb\u5236\u8d4b\u503c\uff0c\u5982\u679c\u7ed9\u4e88\u7684\u6570\u5b57\u8d85\u51fa\u4e86\u6574\u578b\u7684\u8303\u56f4\u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002 \u6d6e\u70b9\u578b \u00b6 \u533a\u5206\u6574\u578b\u548c\u6d6e\u70b9\u578b\u7684\u552f\u4e00\u6307\u6807\u5c31\u662f \u6709\u6ca1\u6709\u5c0f\u6570\u70b9 \u4e14\u4e0d\u80fd\u4e92\u76f8\u8f6c\u6362\uff0c\u5b9a\u4e49\u6d6e\u70b9\u578b\u53d8\u91cf\u7684\u65f6\u5019\u8981\u6ce8\u610f\u6bcf\u79cd\u6d6e\u70b9\u578b\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u5982\u679c\u8d85\u51fa\u53ef\u80fd\u4f1a\u8d4b\u503c\u5931\u8d25\uff0c\u4e5f\u6709\u53ef\u80fd\u7ed3\u679c\u4e0d\u662f\u9884\u671f\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 fn main (){ // \u6d6e\u70b9\u578b let f = 64.00 ; println! ( \"f is {:?}\" , f ) let f : i64 = f ; println! ( \"f is {:?}\" , f ) } \u8fd9\u6bb5\u4ee3\u7801\u91cc\u9762\u4f1a\u53d1\u751f\u7f16\u8bd1\u9519\u8bef\uff0c let f:i64 = f; 1 2 3 4 5 6 7 8 9 10 11 error [ E0308 ] : mismatched types - -> scalar_type . rs : 21 : 17 | 21 | let f : i64 = f ; | --- ^ expected ` i64 ` , found floating - point number | | | expected due to this error : aborting due to previous error For more information about this error , try ` rustc -- explain E0308 ` . \u56e0\u4e3a\u65b0\u7684 f \u7c7b\u578b\u662f i64 \uff0c\u4e0d\u80fd\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff01\uff01Rust \u4e2d\u7684\u6570\u5b57\u7c7b\u578b\u4e0e C/C++ \u4e2d\u4e0d\u540c\u7684\u662f Rust \u8bed\u8a00\u4e0d\u5141\u8bb8\u7c7b\u578b\u81ea\u52a8\u8f6c\u6362\u3002 \u5e03\u5c14\u578b \u00b6 \u5e03\u5c14\u7c7b\u578b\uff1a\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u53d6\u503c true \u6216 false \u3002 \u5b57\u7b26\u7c7b\u578b \u00b6 Rust \u4f7f\u7528 char \u4f5c\u4e3a\u5b57\u7b26\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u70b9\u53ef\u8c13\u662f\u7ee7\u627f\u4e86 C/C++ \u3002\u4f46\u4e0e C/C++ \u4e0d\u540c\u7684\u662f\uff1a Rust \u4f7f\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u7684\u7f16\u7801\uff0c Rust \u9009\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u7f16\u7801\u53ef\u8c13\u662f\u987a\u5e94\u65f6\u4ee3\u7684\u6f6e\u6d41\u3002\u56e0\u4e3a\u7f16\u7a0b\u65e9\u5c31\u4e0d\u6781\u9650\u4e8e\u62c9\u4e01\u8bed\u7cfb\u7684\u56fd\u5bb6\uff0c\u50cf\u4e2d\u56fd\u3001\u5370\u5ea6\u3001\u65e5\u672c\u7b49\u56fd\u5bb6\u90fd\u6709\u5927\u91cf\u7684\u7a0b\u5e8f\u5458\uff0c\u5e76\u4e14\u4e92\u8054\u7f51\u662f\u5f00\u653e\u7684\uff0c\u800c\u4e0d\u53ea\u9650\u4e8e\u5b58\u5728\u4e8e\u4e2d\u56fd\u5c40\u90e8\u7684\uff0c\u6240\u4ee5 Rust \u4f7f\u7528\u7684 UTF-8 \u7f16\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 fn main (){ // \u5b57\u7b26 let special_character = '@' ; //default let alphabet : char = 'A' ; let chinese : char = '\u4e01' ; let emoji : char = '\ud83e\udd80' ; // \u8783\u87f9emoji println! ( \"special character is {}\" , special_character ); println! ( \"alphabet is {}\" , alphabet ); println! ( \"chinese is {:?}\" , chinese ); println! ( \"emoji is {}\" , emoji ); } \u5176\u4ed6\u8865\u5145 \u00b6 \u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal 98_222 Hex 0xff Octal 0o77 Binary 0b1111_0000 Byte( u8 )only b 'A' \u5176\u4ed6\u8d44\u6599 \u00b6 https://github.com/higker/learning-rust-zh","title":"Rust \u6570\u636e\u7c7b\u578b"},{"location":"docs/scalar_type/#_1","text":"Rust \u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\uff0c\u6240\u4ee5 \u7c7b\u578b\u7cfb\u7edf \u4e5f\u662f\u8fd9\u95e8\u8bed\u8a00\u7684\u91cd\u4e2d\u4e4b\u91cd\uff0c\u5b83\u4f53\u73b0\u4e86\u8bed\u8a00\u6240\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u503c\uff0c\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6bd4\u5982\u6211\u4eec\u8bf4 \u7c7b\u578b\u7cfb\u7edf \u5b58\u5728\u7684\u76ee\u7684\uff0c\u5c31\u662f \u7a0b\u5e8f\u5728\u5b58\u50a8\u6216\u64cd\u4f5c\u67d0\u4e2a\u6570\u4e4b\u524d\u68c0\u67e5\u8fd9\u4e2a\u6570\u7684\u6709\u6548\u6027 \u3002","title":"\u6982 \u8ff0"},{"location":"docs/scalar_type/#scalar-type","text":"Rust \u8bed\u8a00\u4e2d\u6709\u56db\u79cd\u6807\u91cf\u6570\u636e\u7c7b\u578b\uff1a \u6574\u578b \u6d6e\u70b9\u578b \u5e03\u5c14\u7c7b\u578b \u5b57\u7b26\u7c7b\u578b \u63a5\u4e0b\u6765\u6211\u4eec\u4f1a\u5bf9\u6bcf\u79cd\u6807\u91cf\u6570\u636e\u7c7b\u578b\u505a\u4e00\u4e2a\u7b80\u5355\u7684\u4ecb\u7ecd\u3002","title":"Scalar Type"},{"location":"docs/scalar_type/#_2","text":"\u6574\u578b\u80fd\u591f\u56ca\u62ec\u6240\u6709\u7684\u6570\u5b57\uff0c\u867d\u7136\u4e0d\u53ef\u80fd\u65e0\u7a77\u5927\uff0c\u4f46\u5df2\u7ecf\u5927\u5230\u8db3\u591f\u4f7f\u7528\u4e86\u3002 \u6700\u5927\u7684\u6574\u578b\u4e3a 340282366920938463463374607431768211455 \uff0c\u7531 std::u128:MAX \u5b9a\u4e49\u3002 \u6700\u5c0f\u7684\u6574\u578b\u4e3a -170141183460469231731687303715884105728 \uff0c\u7531 std::i128:MIN \u5b9a\u4e49\u3002 \u6574\u6570\u7c7b\u578b\u5728 Rust \u4e2d\u53c8\u5206\u4e3a: signed \u548c unsigned \u3002 \u6709\u7b26\u53f7\u6574\u6570\u7c7b\u578b\u53ef\u4ee5\u5b58\u50a8\u8d1f\u6570\uff0c\u4f46\u662f\u65e0\u7b26\u53f7\u7684\u53ea\u80fd\u5b58\u50a8\u6574\u6570\u4e0d\u80fd\u5b58\u50a8\u8d1f\u6570\u3002 \u7c7b\u578b\u5217\u8868\ud83d\udc47 \u5f53\u524d\u53ea\u5217\u51fa\u6574\u6570\u7c7b\u578b\uff0c\u5176\u4ed6\u7c7b\u578b\u81ea\u884c\u67e5\u8be2\u8d44\u6599\u3002 size signed unsigned 8bit i8 u8 16bit i16 u16 32bit i32 u32 64bit i64 u64 128bit i128 u128 Arch isize usize arch \u662f\u7531 CPU \u6784\u67b6\u51b3\u5b9a\u7684\u5927\u5c0f\u7684\u6574\u578b\u7c7b\u578b\uff0c\u5927\u5c0f\u4e3a arch \u7684\u6574\u6570\u5728 x86 \u673a\u5668\u4e0a\u4e3a 32 \u4f4d\uff0c\u5728 x64 \u673a\u5668\u4e0a\u4e3a 64 \u4f4d\u3002 \u6bcf\u79cd\u6574\u578b\u5e76\u4e0d\u90fd\u662f\u80fd\u5b58\u50a8\u4efb\u610f\u6570\u5b57\u7684\uff0c\u6bcf\u79cd\u6574\u578b\u53ea\u80fd\u88c5\u4e0b\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u5b57\uff0c\u5982\u679c\u7ed9\u4e88\u7684\u6570\u5b57\u8d85\u51fa\u4e86\u6574\u578b\u7684\u8303\u56f4\u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\uff0c\u76f8\u4fe1\u4f60\u5982\u679c\u4e4b\u524d\u5199\u8fc7 Java \u4e5f\u6709\u4f53\u4f1a\u3002 \u4ee3\u7801\u4f8b\u5b50: 1 2 3 4 5 6 7 8 9 10 fn main (){ // \u6574\u578b let i = 00_32 ; // default scalar type i32 let age : u8 = 0x16 ; let num : i64 = - 64 ; let iarch : isize = i ; let uarch : usize = 64 ; println! ( \"i = {} age = {} num = {}\" , i , age , num ); println! ( \"iarch = {} uarch = {}\" , iarch , uarch ); } \u6574\u6570\u652f\u6301\u6574\u6570\u4e2d\u95f4\u5b58\u5728\u4e00\u4e2a\u4e0b\u5212\u7ebf\u548c\u5341\u516d\u8fdb\u5236\u8d4b\u503c\uff0c\u5982\u679c\u7ed9\u4e88\u7684\u6570\u5b57\u8d85\u51fa\u4e86\u6574\u578b\u7684\u8303\u56f4\u5219\u4f1a\u53d1\u751f\u6ea2\u51fa\u3002","title":"\u6574 \u578b"},{"location":"docs/scalar_type/#_3","text":"\u533a\u5206\u6574\u578b\u548c\u6d6e\u70b9\u578b\u7684\u552f\u4e00\u6307\u6807\u5c31\u662f \u6709\u6ca1\u6709\u5c0f\u6570\u70b9 \u4e14\u4e0d\u80fd\u4e92\u76f8\u8f6c\u6362\uff0c\u5b9a\u4e49\u6d6e\u70b9\u578b\u53d8\u91cf\u7684\u65f6\u5019\u8981\u6ce8\u610f\u6bcf\u79cd\u6d6e\u70b9\u578b\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\uff0c\u5982\u679c\u8d85\u51fa\u53ef\u80fd\u4f1a\u8d4b\u503c\u5931\u8d25\uff0c\u4e5f\u6709\u53ef\u80fd\u7ed3\u679c\u4e0d\u662f\u9884\u671f\u7684\u7ed3\u679c\u3002 1 2 3 4 5 6 7 fn main (){ // \u6d6e\u70b9\u578b let f = 64.00 ; println! ( \"f is {:?}\" , f ) let f : i64 = f ; println! ( \"f is {:?}\" , f ) } \u8fd9\u6bb5\u4ee3\u7801\u91cc\u9762\u4f1a\u53d1\u751f\u7f16\u8bd1\u9519\u8bef\uff0c let f:i64 = f; 1 2 3 4 5 6 7 8 9 10 11 error [ E0308 ] : mismatched types - -> scalar_type . rs : 21 : 17 | 21 | let f : i64 = f ; | --- ^ expected ` i64 ` , found floating - point number | | | expected due to this error : aborting due to previous error For more information about this error , try ` rustc -- explain E0308 ` . \u56e0\u4e3a\u65b0\u7684 f \u7c7b\u578b\u662f i64 \uff0c\u4e0d\u80fd\u81ea\u52a8\u7c7b\u578b\u8f6c\u6362\uff01\uff01Rust \u4e2d\u7684\u6570\u5b57\u7c7b\u578b\u4e0e C/C++ \u4e2d\u4e0d\u540c\u7684\u662f Rust \u8bed\u8a00\u4e0d\u5141\u8bb8\u7c7b\u578b\u81ea\u52a8\u8f6c\u6362\u3002","title":"\u6d6e\u70b9\u578b"},{"location":"docs/scalar_type/#_4","text":"\u5e03\u5c14\u7c7b\u578b\uff1a\u53ea\u6709\u4e24\u4e2a\u53ef\u80fd\u7684\u53d6\u503c true \u6216 false \u3002","title":"\u5e03\u5c14\u578b"},{"location":"docs/scalar_type/#_5","text":"Rust \u4f7f\u7528 char \u4f5c\u4e3a\u5b57\u7b26\u6570\u636e\u7c7b\u578b\uff0c\u8fd9\u70b9\u53ef\u8c13\u662f\u7ee7\u627f\u4e86 C/C++ \u3002\u4f46\u4e0e C/C++ \u4e0d\u540c\u7684\u662f\uff1a Rust \u4f7f\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u7684\u7f16\u7801\uff0c Rust \u9009\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u7f16\u7801\u53ef\u8c13\u662f\u987a\u5e94\u65f6\u4ee3\u7684\u6f6e\u6d41\u3002\u56e0\u4e3a\u7f16\u7a0b\u65e9\u5c31\u4e0d\u6781\u9650\u4e8e\u62c9\u4e01\u8bed\u7cfb\u7684\u56fd\u5bb6\uff0c\u50cf\u4e2d\u56fd\u3001\u5370\u5ea6\u3001\u65e5\u672c\u7b49\u56fd\u5bb6\u90fd\u6709\u5927\u91cf\u7684\u7a0b\u5e8f\u5458\uff0c\u5e76\u4e14\u4e92\u8054\u7f51\u662f\u5f00\u653e\u7684\uff0c\u800c\u4e0d\u53ea\u9650\u4e8e\u5b58\u5728\u4e8e\u4e2d\u56fd\u5c40\u90e8\u7684\uff0c\u6240\u4ee5 Rust \u4f7f\u7528\u7684 UTF-8 \u7f16\u7801\u3002 1 2 3 4 5 6 7 8 9 10 11 fn main (){ // \u5b57\u7b26 let special_character = '@' ; //default let alphabet : char = 'A' ; let chinese : char = '\u4e01' ; let emoji : char = '\ud83e\udd80' ; // \u8783\u87f9emoji println! ( \"special character is {}\" , special_character ); println! ( \"alphabet is {}\" , alphabet ); println! ( \"chinese is {:?}\" , chinese ); println! ( \"emoji is {}\" , emoji ); }","title":"\u5b57\u7b26\u7c7b\u578b"},{"location":"docs/scalar_type/#_6","text":"\u6570\u5b57\u5b57\u9762\u503c \u4f8b\u5b50 Decimal 98_222 Hex 0xff Octal 0o77 Binary 0b1111_0000 Byte( u8 )only b 'A'","title":"\u5176\u4ed6\u8865\u5145"},{"location":"docs/scalar_type/#_7","text":"https://github.com/higker/learning-rust-zh","title":"\u5176\u4ed6\u8d44\u6599"},{"location":"docs/string_type/","text":"\u6982 \u8ff0 \u00b6 Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e24\u79cd\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u79cd &str \u662f\u6838\u5fc3\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u79cd String \u662f\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u662f\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u516c\u5f00\u7684\u7ed3\u6784\u4f53\u3002 &str \u5b57\u7b26\u4e32\u9762\u91cf \u00b6 \u5b57\u7b26\u4e32\u9762\u91cf\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u77e5\u9053\u503c\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u6838\u5fc3\u4ee3\u7801\u5728 std:str \u4e2d\u5c31\u53ef\u4ee5\u627e\u5f97\u5230\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u5c31\u770b\u770b\u6e90\u4ee3\u7801\u3002 \u4f7f\u7528\u4f8b\u5b50\uff1a 1 2 3 4 // \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u6a21\u5f0f\u662f \u9759\u6001\u7684 \u8fd9\u5c31\u610f\u5473\u7740\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4ece\u521b\u5efa\u65f6\u5f00\u59cb\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u7a0b\u5e8f\u7ed3\u675f let city = \"\u4e0a\u6d77\" ; let programmer = \"rust coder\" ; println! ( \"city {0} programmer = {1}\" , city , programmer ); \u5b57\u7b26\u4e32\u9762\u91cf\u9ed8\u8ba4\u5c31\u662f\u201c\u9759\u6001\u201d\u7684 \u4f60\u53ef\u4ee5\u901a\u8fc7 static \u5173\u952e\u5b57\u663e\u793a\u58f0\u660e 1 2 let name : & ' static str = \"Jarvib Ding\" ; println! ( \"my name is {name}\" , name = name ); String \u5bf9\u8c61 \u00b6 \u5b57\u7b26\u4e32\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u5b57\u7b26\u4e32\u5bf9\u8c61\u662f\u662f\u4e00\u4e2a \u957f\u5ea6\u53ef\u53d8\u7684\u96c6\u5408 \uff0c\u5b83\u662f \u53ef\u53d8 \u7684\u800c\u4e14\u4f7f\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c\u5b57\u7b26\u4e32\u5bf9\u8c61\u5728 heap \u4e2d\u5206\u914d\u7684\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u4e00\u79cd\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 String::new() \u9759\u6001\u65b9\u6cd5\u3002 \u53e6\u4e00\u79cd\u662f\u6839\u636e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u6765\u521b\u5efa\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4f7f\u7528 String::from() \u65b9\u6cd5\u3002 \u7b80\u5355\u4f7f\u7528\u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u5b57\u7b26\u4e32\u5bf9\u8c61 let mut phone = String :: new (); phone . push_str ( \"Apple iPhone 11\" ); let iphone = String :: from ( phone ); println! ( \"{}\" , iphone ); // 1 {{Hello}} let mut hello_string = String :: new (); hello_string . push_str ( \"{\" ); hello_string . push_str ( \"Hello\" ); hello_string . push_str ( \"}\" ); println! ( \"{}\" , hello_string ); let hello = String :: from ( \"Hello, world!\" ); println! ( \"{}\" , hello ) \u5982\u679c\u9700\u8981\u5c06\u5b57\u7b26\u4e32\u9762\u91cf\u8f6c\u6210 Sting \u5bf9\u8c61\u4f60\u5c31\u9700\u8981\u4f7f\u7528 to_string() \uff0c\u5b57\u7b26\u4e32\u9762\u91cf\u662f\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u65b9\u6cd5\u7684\uff0c\u53ea\u80fd\u5b58\u50a8 \u5b57\u7b26\u4e32\u7684\u5185\u5bb9 \u3002 1 2 3 4 let url = \"https://getrust.tech\" ; let mut domain = url . to_string (); domain = domain . replace ( \"https://\" , \"\" ); println! ( \"domain is {}\" , domain ); output: domain is getrust.tech \u76f8\u5173API\u6587\u6863: https://doc.rust-lang.org/std/string/struct.String.html","title":"Rust \u5b57\u7b26\u4e32"},{"location":"docs/string_type/#_1","text":"Rust \u8bed\u8a00\u63d0\u4f9b\u4e86\u4e24\u79cd\u5b57\u7b26\u4e32\uff0c\u7b2c\u4e00\u79cd &str \u662f\u6838\u5fc3\u5185\u7f6e\u7684\u6570\u636e\u7c7b\u578b\uff0c\u7b2c\u4e8c\u79cd String \u662f\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u662f\u6807\u51c6\u5e93\u4e2d\u7684\u4e00\u4e2a\u516c\u5f00\u7684\u7ed3\u6784\u4f53\u3002","title":"\u6982 \u8ff0"},{"location":"docs/string_type/#str","text":"\u5b57\u7b26\u4e32\u9762\u91cf\u5728\u7f16\u8bd1\u7684\u65f6\u5019\u5c31\u77e5\u9053\u503c\u7684\u5b57\u7b26\u4e32\u7c7b\u578b\uff0c\u6838\u5fc3\u4ee3\u7801\u5728 std:str \u4e2d\u5c31\u53ef\u4ee5\u627e\u5f97\u5230\uff0c\u5982\u679c\u4f60\u611f\u5174\u8da3\u5c31\u770b\u770b\u6e90\u4ee3\u7801\u3002 \u4f7f\u7528\u4f8b\u5b50\uff1a 1 2 3 4 // \u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u6a21\u5f0f\u662f \u9759\u6001\u7684 \u8fd9\u5c31\u610f\u5473\u7740\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u4ece\u521b\u5efa\u65f6\u5f00\u59cb\u4f1a\u4e00\u76f4\u4fdd\u5b58\u5230\u7a0b\u5e8f\u7ed3\u675f let city = \"\u4e0a\u6d77\" ; let programmer = \"rust coder\" ; println! ( \"city {0} programmer = {1}\" , city , programmer ); \u5b57\u7b26\u4e32\u9762\u91cf\u9ed8\u8ba4\u5c31\u662f\u201c\u9759\u6001\u201d\u7684 \u4f60\u53ef\u4ee5\u901a\u8fc7 static \u5173\u952e\u5b57\u663e\u793a\u58f0\u660e 1 2 let name : & ' static str = \"Jarvib Ding\" ; println! ( \"my name is {name}\" , name = name );","title":"&amp;str\u5b57\u7b26\u4e32\u9762\u91cf"},{"location":"docs/string_type/#string","text":"\u5b57\u7b26\u4e32\u662f\u6807\u51c6\u5e93\u63d0\u4f9b\u7684\uff0c\u5b57\u7b26\u4e32\u5bf9\u8c61\u662f\u662f\u4e00\u4e2a \u957f\u5ea6\u53ef\u53d8\u7684\u96c6\u5408 \uff0c\u5b83\u662f \u53ef\u53d8 \u7684\u800c\u4e14\u4f7f\u7528 UTF-8 \u4f5c\u4e3a\u5e95\u5c42\u6570\u636e\u7f16\u7801\u683c\u5f0f\uff0c\u5b57\u7b26\u4e32\u5bf9\u8c61\u5728 heap \u4e2d\u5206\u914d\u7684\uff0c\u5728\u8fd0\u884c\u7684\u65f6\u5019\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\u3002 \u4e00\u79cd\u662f\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7a7a\u5b57\u7b26\u4e32\uff0c\u4f7f\u7528 String::new() \u9759\u6001\u65b9\u6cd5\u3002 \u53e6\u4e00\u79cd\u662f\u6839\u636e\u6307\u5b9a\u7684\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u6765\u521b\u5efa\u5b57\u7b26\u4e32\u5bf9\u8c61\uff0c\u4f7f\u7528 String::from() \u65b9\u6cd5\u3002 \u7b80\u5355\u4f7f\u7528\u793a\u4f8b: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // \u5b57\u7b26\u4e32\u5bf9\u8c61 let mut phone = String :: new (); phone . push_str ( \"Apple iPhone 11\" ); let iphone = String :: from ( phone ); println! ( \"{}\" , iphone ); // 1 {{Hello}} let mut hello_string = String :: new (); hello_string . push_str ( \"{\" ); hello_string . push_str ( \"Hello\" ); hello_string . push_str ( \"}\" ); println! ( \"{}\" , hello_string ); let hello = String :: from ( \"Hello, world!\" ); println! ( \"{}\" , hello ) \u5982\u679c\u9700\u8981\u5c06\u5b57\u7b26\u4e32\u9762\u91cf\u8f6c\u6210 Sting \u5bf9\u8c61\u4f60\u5c31\u9700\u8981\u4f7f\u7528 to_string() \uff0c\u5b57\u7b26\u4e32\u9762\u91cf\u662f\u6ca1\u6709\u4efb\u4f55\u64cd\u4f5c\u65b9\u6cd5\u7684\uff0c\u53ea\u80fd\u5b58\u50a8 \u5b57\u7b26\u4e32\u7684\u5185\u5bb9 \u3002 1 2 3 4 let url = \"https://getrust.tech\" ; let mut domain = url . to_string (); domain = domain . replace ( \"https://\" , \"\" ); println! ( \"domain is {}\" , domain ); output: domain is getrust.tech \u76f8\u5173API\u6587\u6863: https://doc.rust-lang.org/std/string/struct.String.html","title":"String\u5bf9\u8c61"},{"location":"docs/tuple/","text":"tuple \u5143\u7ec4 \u00b6 tuple \u662f \u590d\u5408\u7c7b\u578b \u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c \u590d\u5408\u7c7b\u578b \u5c31\u50cf\u6211\u4eec\u7684\u83dc\u7bee\u5b50\uff0c\u91cc\u9762\u53ef\u4ee5\u653e\u5404\u79cd\u7c7b\u578b\u7684\u83dc\u3002 tuple \u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u4e00\u65e6\u5b9a\u4e49\u4e86\uff0c\u5c31\u4e0d\u80fd\u518d\u6b21\u66f4\u6539\u3002 tuple \u662f\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002 tuple \u5143\u7ec4\u7684\u5b9a\u4e49 \u00b6 \u5728\u5b9a\u4e49\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578b\uff1a 1 let tuple_name : ( data_type1 , data_type2 , data_type3 ) = ( value1 , value2 , value3 ); Rust \u4e2d\u5143\u7ec4\u7684\u5b9a\u4e49\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4f7f\u7528\u4e00\u5bf9\u5c0f\u62ec\u53f7 () \u628a\u6240\u6709\u5143\u7d20\u653e\u5728\u4e00\u8d77\uff0c\u5143\u7d20\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7 , \u5206\u9694\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5ffd\u7565\u7c7b\u578b\u58f0\u660e\u3002 1 let tuple_name = ( v1 , v2 , v3 ) tuple \u5143\u7ec4\u7684\u4f7f\u7528 \u00b6 \u4e0b\u6807\u8bbf\u95ee \u89e3\u6784\u8d4b\u503c \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5143\u7ec4\u540d.\u7d22\u5f15\u6570\u5b57 \u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u76f8\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002 \u5982\u679c\u8981\u8f93\u51fa\u5143\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5fc5\u987b\u4f7f\u7528 {:?} \u683c\u5f0f\u5316\u7b26\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 fn main () { let tuples : ( &' static str , i8 , f64 ) = ( \"\ud83e\udd80\" , 22 , 3.1415927 ); println! ( \"{:?}\" , tuples ); // \u58f0\u660e\u4e00\u4e2a\u53ef\u53d8\u7684tuple let mut people = ( \"tom\" , \"robin\" , \"jarvib\" ); // \u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee println! ( \"{},{},{}\" , people . 0 , people . 1 , people . 2 ); // \u4fee\u6539\u4e0b\u6807\u4e3a2\u7684\u503c people . 2 = \"Jarvib Ding\" ; // \u901a\u8fc7 \u89e3\u6784\u8d4b\u503c (destructing) let ( v1 , v2 , v3 ) = people ; println! ( \"{},{},{}\" , v1 , v2 , v3 ); } output: 1 2 3 ( \"\ud83e\udd80\" , 22 , 3.1415927 ) tom , robin , jarvib tom , robin , Jarvib Ding","title":"Rust \u5143\u7ec4Tuple"},{"location":"docs/tuple/#tuple","text":"tuple \u662f \u590d\u5408\u7c7b\u578b \u53ef\u4ee5\u5b58\u50a8\u591a\u4e2a\u4e0d\u540c\u7c7b\u578b\u7684\u6570\u636e\uff0c \u590d\u5408\u7c7b\u578b \u5c31\u50cf\u6211\u4eec\u7684\u83dc\u7bee\u5b50\uff0c\u91cc\u9762\u53ef\u4ee5\u653e\u5404\u79cd\u7c7b\u578b\u7684\u83dc\u3002 tuple \u957f\u5ea6\u662f\u56fa\u5b9a\u7684\uff0c\u800c\u4e14\u4e00\u65e6\u5b9a\u4e49\u4e86\uff0c\u5c31\u4e0d\u80fd\u518d\u6b21\u66f4\u6539\u3002 tuple \u662f\u4e0b\u6807\u4ece 0 \u5f00\u59cb\u3002","title":"tuple\u5143\u7ec4"},{"location":"docs/tuple/#tuple_1","text":"\u5728\u5b9a\u4e49\u7684\u65f6\u5019\u53ef\u4ee5\u6307\u5b9a\u5b58\u50a8\u7684\u6570\u636e\u7c7b\u578b\uff1a 1 let tuple_name : ( data_type1 , data_type2 , data_type3 ) = ( value1 , value2 , value3 ); Rust \u4e2d\u5143\u7ec4\u7684\u5b9a\u4e49\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4f7f\u7528\u4e00\u5bf9\u5c0f\u62ec\u53f7 () \u628a\u6240\u6709\u5143\u7d20\u653e\u5728\u4e00\u8d77\uff0c\u5143\u7d20\u4e4b\u95f4\u4f7f\u7528\u9017\u53f7 , \u5206\u9694\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u5ffd\u7565\u7c7b\u578b\u58f0\u660e\u3002 1 let tuple_name = ( v1 , v2 , v3 )","title":"tuple\u5143\u7ec4\u7684\u5b9a\u4e49"},{"location":"docs/tuple/#tuple_2","text":"\u4e0b\u6807\u8bbf\u95ee \u89e3\u6784\u8d4b\u503c \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 \u5143\u7ec4\u540d.\u7d22\u5f15\u6570\u5b57 \u6765\u8bbf\u95ee\u5143\u7ec4\u4e2d\u76f8\u5e94\u7d22\u5f15\u4f4d\u7f6e\u7684\u5143\u7d20\u3002\u7d22\u5f15\u4ece 0 \u5f00\u59cb\u3002 \u5982\u679c\u8981\u8f93\u51fa\u5143\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\uff0c\u5fc5\u987b\u4f7f\u7528 {:?} \u683c\u5f0f\u5316\u7b26\uff1a 1 2 3 4 5 6 7 8 9 10 11 12 13 fn main () { let tuples : ( &' static str , i8 , f64 ) = ( \"\ud83e\udd80\" , 22 , 3.1415927 ); println! ( \"{:?}\" , tuples ); // \u58f0\u660e\u4e00\u4e2a\u53ef\u53d8\u7684tuple let mut people = ( \"tom\" , \"robin\" , \"jarvib\" ); // \u901a\u8fc7\u4e0b\u6807\u8bbf\u95ee println! ( \"{},{},{}\" , people . 0 , people . 1 , people . 2 ); // \u4fee\u6539\u4e0b\u6807\u4e3a2\u7684\u503c people . 2 = \"Jarvib Ding\" ; // \u901a\u8fc7 \u89e3\u6784\u8d4b\u503c (destructing) let ( v1 , v2 , v3 ) = people ; println! ( \"{},{},{}\" , v1 , v2 , v3 ); } output: 1 2 3 ( \"\ud83e\udd80\" , 22 , 3.1415927 ) tom , robin , jarvib tom , robin , Jarvib Ding","title":"tuple\u5143\u7ec4\u7684\u4f7f\u7528"},{"location":"docs/variable/","text":"\u6982 \u8ff0 \u00b6 \u6bcf\u4e2a\u7f16\u7a0b\u8bed\u8a00\u90fd\u79bb\u5f00\u4e0d \u53d8\u91cf \u8fd9\u4e2a\u6982\u5ff5\uff0c Rust \u4e5f\u4e00\u6837\uff0c\u4eca\u5929\u5c31\u8bf4\u8bf4 Rust \u4e2d\u7684\u53d8\u91cf\u3002 \u6982 \u5ff5 \u00b6 \u4e0d\u53ef\u53d8\u7684\u53d8\u91cf \u53ef\u53d8\u7684\u53d8\u91cf \u53d8\u91cf\u7684\u91cd\u5f71 Shadowing Rust \u9996\u5148\u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\u5e76\u4e14\u5177\u5907\u81ea\u52a8\u5224\u65ad\u53d8\u91cf\u7c7b\u578b\u7684\u80fd\u529b\u3002\u6709\u4e86\u8fd9\u79cd\u80fd\u529b\u4e4b\u540e\uff0c\u4f7f\u5f97\u5f00\u53d1\u8005\u5728\u7f16\u7801\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4ea7\u751f\u4e00\u79cd\u81ea\u5df1\u5728\u4f7f\u7528\u4e00\u95e8\u7c7b\u4f3c\u4e8e JavaScript \u5f31\u7c7b\u578b\u8bed\u8a00\u7684\u5047\u60f3\u3002 \u5f53\u7136 Rust \u4e0d\u662f\u8fd9\u6837\u7684\uff0c Rust \u5f3a\u7c7b\u578b\u7684! Rust \u5f3a\u7c7b\u578b\u7684!\uff0c Rust \u5f3a\u7c7b\u578b\u7684! \u8bf43\u904d\uff0c\u5982\u679c\u662f\u4e0a\u9762\ud83d\udc46\u56fe\u7247\u8fd9\u6837\u6211\u4e0d\u4f1a\u5165\u5751\u7684\u3002\u3002 \u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b v8 \u5f15\u64ce\u3002\u3002 \u4e0d\u53ef\u53d8\u7684\u53d8\u91cf \u00b6 \u5728 Rust \u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u8981\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u770b\u4e0b\u9762\u4ee3\u7801 1 2 3 4 5 6 7 8 fn main (){ // \u901a\u8fc7let \u58f0\u660e\u7684\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684 let v = \"variable\" ; println! ( \"\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf: {}\" , v ); //unexpected token v = \"var 2\" println! ( \"{}\" , v ) } \u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 error [ E0384 ] : cannot assign twice to immutable variable ` v ` --> variable.rs:13:5 | 10 | let v = \"variable\" ; | - | | | first assignment to ` v ` | help: make this binding mutable: ` mut v ` ... 13 | v = \"var 2\" ; | ^^^^^^^^^^^ cannot assign twice to immutable variable error: aborting due to previous error For more information about this error, try ` rustc --explain E0384 ` . \u5173\u952e\u6d88\u606f: \u4e0d\u80fd\u4e24\u6b21\u5206\u914d\u4e0d\u53d8\u7684\u53d8\u91cf! \u274e\u9519\u8bef\u5728\u4e8e v \u8fd9\u4e2a\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf\uff0c\u4e0d\u80fd\u8fdb\u884c\u7b2c\u4e8c\u6b21\u8fdb\u884c\u8d4b\u503c\u4fee\u6539\u3002\u7531\u4e8e\u4e2a\u4eba\u4e4b\u524d\u5199\u8fc7 Java \u548c Go \u611f\u89c9\u6709\u70b9\u7c7b\u4f3c\u4e8e Java \u8bed\u8a00\u4e2d\u7684 final \u5173\u952e\u5b57\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u770b\u8fd9\u53e5\u8bdd\u7684\u4e4b\u524d\u4f60\u5f97\u5148\u4e86\u89e3 java \u76f8\u5173\u7684\u7f16\u8bd1\u673a\u5236\u3002\u5982\u679c\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5728\u5047\u8bbe\u503c\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff0c\u800c\u6211\u4eec\u4ee3\u7801\u7684\u53e6\u4e00\u90e8\u5206\u5728\u6539\u53d8\u8be5\u503c\uff0c\u90a3\u4e48\u4ee3\u7801\u7684\u7b2c\u4e00\u90e8\u5206\u53ef\u80fd\u5c31\u4e0d\u4f1a\u6309\u7167\u8bbe\u8ba1\u7684\u610f\u56fe\u53bb\u8fd0\u8f6c\uff0c\u7531\u4e8e\u8fd9\u79cd\u539f\u56e0\u9020\u6210\u7684\u9519\u8bef\u5f88\u96be\u5728\u4e8b\u540e\u627e\u5230\u3002\u8fd9\u662f Rust \u8bed\u8a00\u8bbe\u8ba1\u8fd9\u79cd\u673a\u5236\u7684\u539f\u56e0\u3002 \u8fd9\u5c31\u7275\u626f\u5230\u4e86 Rust \u8bed\u8a00\u4e3a\u4e86\u9ad8\u5e76\u53d1\u5b89\u5168\u800c\u505a\u7684\u8bbe\u8ba1\uff1a\u5728\u8bed\u8a00\u5c42\u9762\u5c3d\u91cf\u5c11\u7684\u8ba9\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u6539\u53d8\u3002\u6240\u4ee5 v \u7684\u503c\u4e0d\u53ef\u53d8\u3002 \u53ef\u53d8\u53d8\u91cf \u00b6 \u5982\u679c\u60f3\u58f0\u660e\u4e00\u4e2a\u53ef\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u8fd9\u65f6\u6211\u4eec\u5c31\u4f7f\u7528 mut \u5173\u952e\u5b57: 1 2 3 4 5 6 // \u901a\u8fc7mut\u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u4fee\u6539 let mut m = 123 ; //println!(\"m assigned value is {}\",m); m = 666 + m ; println! ( \"\u8fd9\u662f\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf: {}\" , m ); // OUTPUT\uff1a 789 \u91cd\u5f71 & Shadowing \u00b6 \u770b\u770b\u4ee3\u7801\uff0c\u6309\u7167\u4e4b\u524d\u6211\u8bf4\u7684 let \u58f0\u660e\u7684\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e0b\u9762\u4ee3\u7801\u4f1a\u7f16\u8bd1\u51fa\u9519\u5417\uff1f\uff1f\uff1f 1 2 3 4 5 let s = 32 ; let s = 32 + s ; println! ( \"s value is {}\" , s ); let s = s - 32 ; println! ( \"s value assigned value is {}\" , s ); \u7b54\u6848\u662f: \u53ef\u4ee5\u2705 \u7f16\u8bd1\u4ee3\u7801\u7f16\u8bd1\u5668\u6ca1\u6709\u62a5\u9519\uff0c\u5f88\u591a\u4eba\u5c31\u5947\u602a\u4e86\uff0c let \u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u662f\u4e0d\u53ef\u53d8\u5417\uff1f \u5bf9\u7684\uff0c let \u5173\u952e\u5b57\u91cd\u65b0\u58f0\u660e\u7684\u76f8\u540c\u53d8\u91cf\u7684\u540d\u7684\u53d8\u91cf\u4f1a\u780d\u6389\u4e4b\u524d\u7684\u53d8\u91cf \u5e76\u4e14\u5982\u679c\u9700\u8981\u4e4b\u524d\u53d8\u91cf\u7684\u503c\u5c31\u4f1a\u62ff\u5230\u503c\u7136\u540e\u5728\u5220\u9664\u6389\uff0c\u91cd\u65b0\u5206\u914d\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u5730\u5740\u67e5\u770b\u53d8\u5316\u3002 1 2 3 4 // \u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u5185\u5b58\u5730\u5740\u5c31\u67e5\u770b println! ( \"old s pointer is {:p}\" , & s ); let s = s ; println! ( \"new s pointer is {:p}\" , & s ); \u91cd\u5f71\u7684\u6982\u5ff5\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u91cc\u7684\"\u91cd\u5199\"\uff08 Override \uff09\u6216\"\u91cd\u8f7d\"\uff08 Overload \uff09\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u91cd\u5f71\u5c31\u662f\u6307\u53d8\u91cf\u7684\u540d\u79f0\u53ef\u4ee5\u88ab\u91cd\u65b0\u4f7f\u7528\u7684\u673a\u5236\u3002 \u5e38\u91cf\u4e0e\u4e0d\u53ef\u53d8\u53d8\u91cf\u7684\u533a\u522b \u00b6 \u5728 Rust \u60f3\u58f0\u660e\u5e38\u91cf\u53ef\u4ee5\u4f7f\u7528 const \u5173\u952e\u5b57: 1 2 const MY_AGE : u64 = 22 ; println! ( \"my age is {}\" , MY_AGE ) // 22 \u5e38\u91cf\u540d\u7684\u547d\u540d\u89c4\u5219\u53ef\u53d8\u91cf\u7684\u547d\u540d\u89c4\u5219\u4e00\u6837\uff0c\u4f46\u5e38\u91cf\u540d\u4e00\u822c\u90fd\u662f \u5927\u5199 \u5b57\u6bcd\u3002 \u5b9a\u4e49\u5e38\u91cf\u65f6\u5fc5\u987b\u6307\u5b9a\u6570\u636e\u7c7b\u578b\uff0c\u800c\u5b9a\u4e49\u53d8\u91cf\u65f6\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\u3002 \u867d\u7136\u58f0\u660e\u53d8\u91cf\u65f6\u4f7f\u7528 let \u5173\u952e\u5b57\u4e5f\u4f1a\u5bfc\u81f4 \u53d8\u91cf\u4e0d\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u52a0\u4e0a mut \u5173\u952e\u5b57\u6765\u8ba9\u53d8\u91cf\u53ef\u4ee5\u88ab\u91cd\u65b0\u8d4b\u503c\u3002\u7136\u800c\u5e38\u91cf\u5374\u6ca1\u6709\u8fd9\u79cd\u673a\u5236\uff0c\u5e38\u91cf\u4e00\u65e6\u5b9a\u4e49\u5c31\u6c38\u8fdc\u4e0d\u53ef\u53d8\u66f4\u548c\u91cd\u65b0\u8d4b\u503c\u3002 \u5e38\u91cf\u53ea\u80fd \u88ab\u8d4b\u503c\u4e3a \u5e38\u91cf\u8868\u8fbe\u5f0f/\u6570\u5b66\u8868\u8fbe\u5f0f \uff0c\u4e0d\u80fd\u662f \u51fd\u6570\u8fd4\u56de\u503c \u6216\u8005\u5176\u5b83\u53ea\u6709\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u7684\u503c\u3002 \u8fd9\u662f\u56e0\u4e3a \u5e38\u91cf \u53ea\u662f\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f1a\u5728 \u7f16\u8bd1\u65f6 \u66ff\u6362\u4e3a\u5177\u4f53\u7684\u503c\uff0c\u8fd9\u4e2a\u6709\u70b9\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u4e2d\u7684 #define \u5b9a\u4e49\u7684\u7b26\u53f7\u3002 \u5e38\u91cf\u4e0e\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u4e0d\u540c\u70b9\u662f\uff1a \u5e38\u91cf\u4e0d\u80fd\u88ab\u5c4f\u853d/\u906e\u6321/\u91cd\u5f71\uff0c\u4e5f\u4e0d\u80fd\u88ab\u91cd\u590d\u5b9a\u4e49 \u3002 1 2 3 4 5 6 fn main () { const NAME : & str = \"Jarvib Ding\" ; const NAME : usize = NAME . len (); //Error : `NAME` already defined \u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e86 \u4e0d\u80fd\u91cd\u590d println! ( \"name: {}\" , NAME ); } \u5c0f \u7ed3 \u00b6 \u901a\u8fc7\u8fd9\u51e0\u6bb5\u4ee3\u7801\u4f8b\u5b50\u5c31\u80fd\u770b\u51fa\u6765 Rust \u8bbe\u8ba1\u8005\u5bf9\u7a0b\u5e8f\u5b89\u5168\u7684\u91cd\u89c6\uff0c\u8fd8\u6709\u5f88\u591a\u4eba\u8bf4 Rust \u5bf9\u7a0b\u5e8f\u5458\u8981\u6c42\u5f88\u9ad8\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355\u51e0\u4e2a\u4f8b\u5b50\uff0c\u65b0\u624b\u4e0a\u6765\u4f30\u8ba1\u8981\u548c\u7f16\u8bd1\u5668\u6597\u4e89\u51e0\u628a\uff0c\u624d\u80fd\u6210\u529f\u7f16\u8bd1\u3002\u5728\u4f60\u548c\u7f16\u8bd1\u5668\u6597\u4e89\u7684\u65f6\u5019\u4f60\u5df2\u7ecf\u5f97\u5230\u4e86\u8fdb\u5316\u4e86\uff0c\u597d\u4e86\uff0c\u4ee5\u4e0a\u662f\u6211\u4e2a\u4eba\u5b66\u4e60\u603b\u7ed3\uff0c\u6709\u95ee\u9898 call \u6211\u5728 github \u4e0a\u8054\u7cfb\u6211\uff0c\u540e\u9762\u5982\u679c\u6709\u65f6\u95f4\u7684\u8bdd\uff0c\u6587\u7ae0\u8fd8\u4f1a\u7ee7\u7eed\u8ddf\u8fdb\u3002 \u76f8\u5173\u8d44\u6599 \u00b6 https://chromium.googlesource.com/v8/v8.git https://github.com/higker/learning-rust-zh https://cloud.tencent.com/developer/article/1379380","title":"Rust \u53d8\u91cf\u5b9a\u4e49"},{"location":"docs/variable/#_1","text":"\u6bcf\u4e2a\u7f16\u7a0b\u8bed\u8a00\u90fd\u79bb\u5f00\u4e0d \u53d8\u91cf \u8fd9\u4e2a\u6982\u5ff5\uff0c Rust \u4e5f\u4e00\u6837\uff0c\u4eca\u5929\u5c31\u8bf4\u8bf4 Rust \u4e2d\u7684\u53d8\u91cf\u3002","title":"\u6982 \u8ff0"},{"location":"docs/variable/#_2","text":"\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf \u53ef\u53d8\u7684\u53d8\u91cf \u53d8\u91cf\u7684\u91cd\u5f71 Shadowing Rust \u9996\u5148\u662f\u4e00\u95e8\u5f3a\u7c7b\u578b\u7684\u8bed\u8a00\u5e76\u4e14\u5177\u5907\u81ea\u52a8\u5224\u65ad\u53d8\u91cf\u7c7b\u578b\u7684\u80fd\u529b\u3002\u6709\u4e86\u8fd9\u79cd\u80fd\u529b\u4e4b\u540e\uff0c\u4f7f\u5f97\u5f00\u53d1\u8005\u5728\u7f16\u7801\u7684\u8fc7\u7a0b\u4e2d\u4f1a\u4ea7\u751f\u4e00\u79cd\u81ea\u5df1\u5728\u4f7f\u7528\u4e00\u95e8\u7c7b\u4f3c\u4e8e JavaScript \u5f31\u7c7b\u578b\u8bed\u8a00\u7684\u5047\u60f3\u3002 \u5f53\u7136 Rust \u4e0d\u662f\u8fd9\u6837\u7684\uff0c Rust \u5f3a\u7c7b\u578b\u7684! Rust \u5f3a\u7c7b\u578b\u7684!\uff0c Rust \u5f3a\u7c7b\u578b\u7684! \u8bf43\u904d\uff0c\u5982\u679c\u662f\u4e0a\u9762\ud83d\udc46\u56fe\u7247\u8fd9\u6837\u6211\u4e0d\u4f1a\u5165\u5751\u7684\u3002\u3002 \u611f\u5174\u8da3\u7684\u53ef\u4ee5\u53bb\u770b\u770b v8 \u5f15\u64ce\u3002\u3002","title":"\u6982 \u5ff5"},{"location":"docs/variable/#_3","text":"\u5728 Rust \u4e2d\u58f0\u660e\u4e00\u4e2a\u53d8\u91cf\u8981\u4f7f\u7528 let \u5173\u952e\u5b57\uff0c\u770b\u4e0b\u9762\u4ee3\u7801 1 2 3 4 5 6 7 8 fn main (){ // \u901a\u8fc7let \u58f0\u660e\u7684\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684 let v = \"variable\" ; println! ( \"\u8fd9\u662f\u4e00\u4e2a\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf: {}\" , v ); //unexpected token v = \"var 2\" println! ( \"{}\" , v ) } \u7f16\u8bd1\u8fd9\u6bb5\u4ee3\u7801\u7f16\u8bd1\u5668\u4f1a\u62a5\u9519: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 error [ E0384 ] : cannot assign twice to immutable variable ` v ` --> variable.rs:13:5 | 10 | let v = \"variable\" ; | - | | | first assignment to ` v ` | help: make this binding mutable: ` mut v ` ... 13 | v = \"var 2\" ; | ^^^^^^^^^^^ cannot assign twice to immutable variable error: aborting due to previous error For more information about this error, try ` rustc --explain E0384 ` . \u5173\u952e\u6d88\u606f: \u4e0d\u80fd\u4e24\u6b21\u5206\u914d\u4e0d\u53d8\u7684\u53d8\u91cf! \u274e\u9519\u8bef\u5728\u4e8e v \u8fd9\u4e2a\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf\uff0c\u4e0d\u80fd\u8fdb\u884c\u7b2c\u4e8c\u6b21\u8fdb\u884c\u8d4b\u503c\u4fee\u6539\u3002\u7531\u4e8e\u4e2a\u4eba\u4e4b\u524d\u5199\u8fc7 Java \u548c Go \u611f\u89c9\u6709\u70b9\u7c7b\u4f3c\u4e8e Java \u8bed\u8a00\u4e2d\u7684 final \u5173\u952e\u5b57\u4fee\u9970\u7684\u53d8\u91cf\uff0c\u770b\u8fd9\u53e5\u8bdd\u7684\u4e4b\u524d\u4f60\u5f97\u5148\u4e86\u89e3 java \u76f8\u5173\u7684\u7f16\u8bd1\u673a\u5236\u3002\u5982\u679c\u6211\u4eec\u7f16\u5199\u7684\u7a0b\u5e8f\u7684\u4e00\u90e8\u5206\u5728\u5047\u8bbe\u503c\u6c38\u8fdc\u4e0d\u4f1a\u6539\u53d8\u7684\u60c5\u51b5\u4e0b\u8fd0\u884c\uff0c\u800c\u6211\u4eec\u4ee3\u7801\u7684\u53e6\u4e00\u90e8\u5206\u5728\u6539\u53d8\u8be5\u503c\uff0c\u90a3\u4e48\u4ee3\u7801\u7684\u7b2c\u4e00\u90e8\u5206\u53ef\u80fd\u5c31\u4e0d\u4f1a\u6309\u7167\u8bbe\u8ba1\u7684\u610f\u56fe\u53bb\u8fd0\u8f6c\uff0c\u7531\u4e8e\u8fd9\u79cd\u539f\u56e0\u9020\u6210\u7684\u9519\u8bef\u5f88\u96be\u5728\u4e8b\u540e\u627e\u5230\u3002\u8fd9\u662f Rust \u8bed\u8a00\u8bbe\u8ba1\u8fd9\u79cd\u673a\u5236\u7684\u539f\u56e0\u3002 \u8fd9\u5c31\u7275\u626f\u5230\u4e86 Rust \u8bed\u8a00\u4e3a\u4e86\u9ad8\u5e76\u53d1\u5b89\u5168\u800c\u505a\u7684\u8bbe\u8ba1\uff1a\u5728\u8bed\u8a00\u5c42\u9762\u5c3d\u91cf\u5c11\u7684\u8ba9\u53d8\u91cf\u7684\u503c\u53ef\u4ee5\u6539\u53d8\u3002\u6240\u4ee5 v \u7684\u503c\u4e0d\u53ef\u53d8\u3002","title":"\u4e0d\u53ef\u53d8\u7684\u53d8\u91cf"},{"location":"docs/variable/#_4","text":"\u5982\u679c\u60f3\u58f0\u660e\u4e00\u4e2a\u53ef\u88ab\u4fee\u6539\u7684\u53d8\u91cf\u8fd9\u65f6\u6211\u4eec\u5c31\u4f7f\u7528 mut \u5173\u952e\u5b57: 1 2 3 4 5 6 // \u901a\u8fc7mut\u5173\u952e\u5b57\u58f0\u660e\u7684\u53d8\u91cf\u53ef\u4ee5\u88ab\u4fee\u6539 let mut m = 123 ; //println!(\"m assigned value is {}\",m); m = 666 + m ; println! ( \"\u8fd9\u662f\u4e00\u4e2a\u53ef\u53d8\u53d8\u91cf: {}\" , m ); // OUTPUT\uff1a 789","title":"\u53ef\u53d8\u53d8\u91cf"},{"location":"docs/variable/#shadowing","text":"\u770b\u770b\u4ee3\u7801\uff0c\u6309\u7167\u4e4b\u524d\u6211\u8bf4\u7684 let \u58f0\u660e\u7684\u53d8\u91cf\u662f\u4e0d\u53ef\u53d8\u7684\uff0c\u4e0b\u9762\u4ee3\u7801\u4f1a\u7f16\u8bd1\u51fa\u9519\u5417\uff1f\uff1f\uff1f 1 2 3 4 5 let s = 32 ; let s = 32 + s ; println! ( \"s value is {}\" , s ); let s = s - 32 ; println! ( \"s value assigned value is {}\" , s ); \u7b54\u6848\u662f: \u53ef\u4ee5\u2705 \u7f16\u8bd1\u4ee3\u7801\u7f16\u8bd1\u5668\u6ca1\u6709\u62a5\u9519\uff0c\u5f88\u591a\u4eba\u5c31\u5947\u602a\u4e86\uff0c let \u58f0\u660e\u7684\u53d8\u91cf\u4e0d\u662f\u4e0d\u53ef\u53d8\u5417\uff1f \u5bf9\u7684\uff0c let \u5173\u952e\u5b57\u91cd\u65b0\u58f0\u660e\u7684\u76f8\u540c\u53d8\u91cf\u7684\u540d\u7684\u53d8\u91cf\u4f1a\u780d\u6389\u4e4b\u524d\u7684\u53d8\u91cf \u5e76\u4e14\u5982\u679c\u9700\u8981\u4e4b\u524d\u53d8\u91cf\u7684\u503c\u5c31\u4f1a\u62ff\u5230\u503c\u7136\u540e\u5728\u5220\u9664\u6389\uff0c\u91cd\u65b0\u5206\u914d\uff0c\u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u5730\u5740\u67e5\u770b\u53d8\u5316\u3002 1 2 3 4 // \u53ef\u4ee5\u901a\u8fc7\u67e5\u770b\u5185\u5b58\u5730\u5740\u5c31\u67e5\u770b println! ( \"old s pointer is {:p}\" , & s ); let s = s ; println! ( \"new s pointer is {:p}\" , & s ); \u91cd\u5f71\u7684\u6982\u5ff5\u4e0e\u5176\u4ed6\u9762\u5411\u5bf9\u8c61\u8bed\u8a00\u91cc\u7684\"\u91cd\u5199\"\uff08 Override \uff09\u6216\"\u91cd\u8f7d\"\uff08 Overload \uff09\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u91cd\u5f71\u5c31\u662f\u6307\u53d8\u91cf\u7684\u540d\u79f0\u53ef\u4ee5\u88ab\u91cd\u65b0\u4f7f\u7528\u7684\u673a\u5236\u3002","title":"\u91cd\u5f71 &amp; Shadowing"},{"location":"docs/variable/#_5","text":"\u5728 Rust \u60f3\u58f0\u660e\u5e38\u91cf\u53ef\u4ee5\u4f7f\u7528 const \u5173\u952e\u5b57: 1 2 const MY_AGE : u64 = 22 ; println! ( \"my age is {}\" , MY_AGE ) // 22 \u5e38\u91cf\u540d\u7684\u547d\u540d\u89c4\u5219\u53ef\u53d8\u91cf\u7684\u547d\u540d\u89c4\u5219\u4e00\u6837\uff0c\u4f46\u5e38\u91cf\u540d\u4e00\u822c\u90fd\u662f \u5927\u5199 \u5b57\u6bcd\u3002 \u5b9a\u4e49\u5e38\u91cf\u65f6\u5fc5\u987b\u6307\u5b9a\u6570\u636e\u7c7b\u578b\uff0c\u800c\u5b9a\u4e49\u53d8\u91cf\u65f6\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u7701\u7565\u3002 \u867d\u7136\u58f0\u660e\u53d8\u91cf\u65f6\u4f7f\u7528 let \u5173\u952e\u5b57\u4e5f\u4f1a\u5bfc\u81f4 \u53d8\u91cf\u4e0d\u53ef\u4ee5\u91cd\u65b0\u8d4b\u503c\uff0c\u4f46\u6211\u4eec\u53ef\u4ee5\u52a0\u4e0a mut \u5173\u952e\u5b57\u6765\u8ba9\u53d8\u91cf\u53ef\u4ee5\u88ab\u91cd\u65b0\u8d4b\u503c\u3002\u7136\u800c\u5e38\u91cf\u5374\u6ca1\u6709\u8fd9\u79cd\u673a\u5236\uff0c\u5e38\u91cf\u4e00\u65e6\u5b9a\u4e49\u5c31\u6c38\u8fdc\u4e0d\u53ef\u53d8\u66f4\u548c\u91cd\u65b0\u8d4b\u503c\u3002 \u5e38\u91cf\u53ea\u80fd \u88ab\u8d4b\u503c\u4e3a \u5e38\u91cf\u8868\u8fbe\u5f0f/\u6570\u5b66\u8868\u8fbe\u5f0f \uff0c\u4e0d\u80fd\u662f \u51fd\u6570\u8fd4\u56de\u503c \u6216\u8005\u5176\u5b83\u53ea\u6709\u5728\u8fd0\u884c\u65f6\u624d\u80fd\u786e\u5b9a\u7684\u503c\u3002 \u8fd9\u662f\u56e0\u4e3a \u5e38\u91cf \u53ea\u662f\u4e00\u4e2a\u7b26\u53f7\uff0c\u4f1a\u5728 \u7f16\u8bd1\u65f6 \u66ff\u6362\u4e3a\u5177\u4f53\u7684\u503c\uff0c\u8fd9\u4e2a\u6709\u70b9\u7c7b\u4f3c\u4e8e C \u8bed\u8a00\u4e2d\u7684 #define \u5b9a\u4e49\u7684\u7b26\u53f7\u3002 \u5e38\u91cf\u4e0e\u53d8\u91cf\u7684\u53e6\u4e00\u4e2a\u4e0d\u540c\u70b9\u662f\uff1a \u5e38\u91cf\u4e0d\u80fd\u88ab\u5c4f\u853d/\u906e\u6321/\u91cd\u5f71\uff0c\u4e5f\u4e0d\u80fd\u88ab\u91cd\u590d\u5b9a\u4e49 \u3002 1 2 3 4 5 6 fn main () { const NAME : & str = \"Jarvib Ding\" ; const NAME : usize = NAME . len (); //Error : `NAME` already defined \u5df2\u7ecf\u88ab\u5b9a\u4e49\u4e86 \u4e0d\u80fd\u91cd\u590d println! ( \"name: {}\" , NAME ); }","title":"\u5e38\u91cf\u4e0e\u4e0d\u53ef\u53d8\u53d8\u91cf\u7684\u533a\u522b"},{"location":"docs/variable/#_6","text":"\u901a\u8fc7\u8fd9\u51e0\u6bb5\u4ee3\u7801\u4f8b\u5b50\u5c31\u80fd\u770b\u51fa\u6765 Rust \u8bbe\u8ba1\u8005\u5bf9\u7a0b\u5e8f\u5b89\u5168\u7684\u91cd\u89c6\uff0c\u8fd8\u6709\u5f88\u591a\u4eba\u8bf4 Rust \u5bf9\u7a0b\u5e8f\u5458\u8981\u6c42\u5f88\u9ad8\uff0c\u5c31\u8fd9\u4e48\u7b80\u5355\u51e0\u4e2a\u4f8b\u5b50\uff0c\u65b0\u624b\u4e0a\u6765\u4f30\u8ba1\u8981\u548c\u7f16\u8bd1\u5668\u6597\u4e89\u51e0\u628a\uff0c\u624d\u80fd\u6210\u529f\u7f16\u8bd1\u3002\u5728\u4f60\u548c\u7f16\u8bd1\u5668\u6597\u4e89\u7684\u65f6\u5019\u4f60\u5df2\u7ecf\u5f97\u5230\u4e86\u8fdb\u5316\u4e86\uff0c\u597d\u4e86\uff0c\u4ee5\u4e0a\u662f\u6211\u4e2a\u4eba\u5b66\u4e60\u603b\u7ed3\uff0c\u6709\u95ee\u9898 call \u6211\u5728 github \u4e0a\u8054\u7cfb\u6211\uff0c\u540e\u9762\u5982\u679c\u6709\u65f6\u95f4\u7684\u8bdd\uff0c\u6587\u7ae0\u8fd8\u4f1a\u7ee7\u7eed\u8ddf\u8fdb\u3002","title":"\u5c0f \u7ed3"},{"location":"docs/variable/#_7","text":"https://chromium.googlesource.com/v8/v8.git https://github.com/higker/learning-rust-zh https://cloud.tencent.com/developer/article/1379380","title":"\u76f8\u5173\u8d44\u6599"}]}